# .github/workflows/ci.yml
# 完整的CI/CD流水线喵

name: Build and Test

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:  # 手动触发

env:
  CUDA_VERSION: "12.3"
  PYTHON_VERSION: "3.11"

jobs:
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Clang-Tidy
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy-16

      - name: Run Clang-Tidy
        run: |
          find src -name "*.cu" -o -name "*.cpp" | \
            xargs clang-tidy-16 -p . \
            --checks='bugprone-*,performance-*' \
            --warnings-as-errors='' \
            > clang-tidy-report.txt || true
          
          cat clang-tidy-report.txt

      - name: 'Qodana Scan'
        uses: JetBrains/qodana-action@v2025.2
        with:
          args: "--image,jetbrains/qodana-clang:2025.2-eap"
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_1824339855 }}

      - name: Upload Clang-Tidy Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: clang-tidy-report
          path: clang-tidy-report.txt

  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    needs: code-quality

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.14
        with:
          cuda: ${{ env.CUDA_VERSION }}

      - name: Setup vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV

      - name: Install Ninja
        shell: powershell
        run: |
          choco install ninja --no-progress

      - name: Configure and Build Package
        shell: powershell
        run: |
          mkdir build
          cd build

          cmake .. -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" `
                   -DCMAKE_EXPORT_COMPILE_COMMANDS=ON `
                   -G Ninja `
                   -DPython_EXECUTABLE="${{ env.pythonLocation }}/python.exe"

          cmake --build .

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            build/*.pyd
            build/*.dll

  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup GCC 11 for CUDA Compatibility
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-11 g++-11
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100

      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.14
        with:
          cuda: ${{ env.CUDA_VERSION }}

      - name: Install Build Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build

      - name: Setup vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git /opt/vcpkg
          /opt/vcpkg/bootstrap-vcpkg.sh
          echo "VCPKG_ROOT=/opt/vcpkg" >> $GITHUB_ENV

      - name: Build Package
        run: |
          mkdir build
          cd build

          cmake .. -DCMAKE_TOOLCHAIN_FILE="/opt/vcpkg/scripts/buildsystems/vcpkg.cmake" \
               -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja \
               -DPython_EXECUTABLE="${{ env.pythonLocation }}/bin/python"

          cmake --build .

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            build/*.so

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ build-windows, build-linux ]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            windows-build/*
            linux-build/*
          draft: false
          prerelease: false
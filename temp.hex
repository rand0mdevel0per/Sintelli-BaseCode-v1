0000	2f 2f 20 3d 3d 3d 3d 3d  3d 3d 3d 3d 3d 3d 3d 3d   // =============
0010	3d 3d 3d 3d 3d 3d 3d 3d  3d 3d 3d 3d 3d 3d 3d 3d   ================
0020	3d 3d 3d 3d 3d 3d 3d 3d  3d 3d 3d 3d 3d 3d 3d 3d   ================
0030	3d 3d 3d 3d 3d 3d 3d 3d  3d 3d 3d 3d 3d 3d 3d 3d   ================
0040	3d 3d 3d 3d 3d 3d 3d 3d  3d 3d 3d 3d 3d 3d 3d 0d   ===============.
0050	0a 2f 2f 20 e7 bb 9f e4  b8 80 e5 9b be e6 96 87   .// ............
0060	e7 9f a9 e9 98 b5 e7 bc  96 e7 a0 81 e7 b3 bb e7   ................
0070	bb 9f 20 2d 20 e5 ae 8c  e6 95 b4 e7 89 88 ef bc   .. - ...........
0080	88 e7 ba af 43 2b 2b 20  42 50 45 20 54 6f 6b 65   ....C++ BPE Toke
0090	6e 69 7a 65 72 ef bc 89  0d 0a 2f 2f 20 75 6e 69   nizer.....// uni
00a0	66 69 65 64 5f 73 79 73  74 65 6d 2e 63 70 70 0d   fied_system.cpp.
00b0	0a 2f 2f 20 3d 3d 3d 3d  3d 3d 3d 3d 3d 3d 3d 3d   .// ============
00c0	3d 3d 3d 3d 3d 3d 3d 3d  3d 3d 3d 3d 3d 3d 3d 3d   ================
00d0	3d 3d 3d 3d 3d 3d 3d 3d  3d 3d 3d 3d 3d 3d 3d 3d   ================
00e0	3d 3d 3d 3d 3d 3d 3d 3d  3d 3d 3d 3d 3d 3d 3d 3d   ================
00f0	3d 3d 3d 3d 3d 3d 3d 3d  3d 3d 3d 3d 3d 3d 3d 3d   ================
0100	0d 0a 0d 0a 23 69 6e 63  6c 75 64 65 20 3c 6f 6e   ....#include <on
0110	6e 78 72 75 6e 74 69 6d  65 5f 63 78 78 5f 61 70   nxruntime_cxx_ap
0120	69 2e 68 3e 0d 0a 23 69  6e 63 6c 75 64 65 20 3c   i.h>..#include <
0130	63 6d 61 74 68 3e 0d 0a  23 69 6e 63 6c 75 64 65   cmath>..#include
0140	20 3c 63 73 74 72 69 6e  67 3e 0d 0a 23 69 6e 63    <cstring>..#inc
0150	6c 75 64 65 20 3c 76 65  63 74 6f 72 3e 0d 0a 23   lude <vector>..#
0160	69 6e 63 6c 75 64 65 20  3c 73 74 72 69 6e 67 3e   include <string>
0170	0d 0a 23 69 6e 63 6c 75  64 65 20 3c 66 73 74 72   ..#include <fstr
0180	65 61 6d 3e 0d 0a 23 69  6e 63 6c 75 64 65 20 3c   eam>..#include <
0190	73 73 74 72 65 61 6d 3e  0d 0a 23 69 6e 63 6c 75   sstream>..#inclu
01a0	64 65 20 3c 61 6c 67 6f  72 69 74 68 6d 3e 0d 0a   de <algorithm>..
01b0	23 69 6e 63 6c 75 64 65  20 3c 75 6e 6f 72 64 65   #include <unorde
01c0	72 65 64 5f 6d 61 70 3e  0d 0a 0d 0a 23 69 6e 63   red_map>....#inc
01d0	6c 75 64 65 20 22 73 74  72 75 63 74 73 2e 68 22   lude "structs.h"
01e0	0d 0a 23 69 6e 63 6c 75  64 65 20 22 6a 73 6f 6e   ..#include "json
01f0	2f 6e 6c 6f 68 6d 61 6e  6e 2f 6a 73 6f 6e 2e 68   /nlohmann/json.h
0200	70 70 22 0d 0a 0d 0a 75  73 69 6e 67 20 6a 73 6f   pp"....using jso
0210	6e 20 3d 20 6e 6c 6f 68  6d 61 6e 6e 3a 3a 6a 73   n = nlohmann::js
0220	6f 6e 3b 0d 0a 0d 0a 2f  2f 20 3d 3d 3d 3d 3d 3d   on;....// ======
0230	3d 3d 3d 3d 3d 3d 20 e5  b8 b8 e9 87 8f e5 ae 9a   ====== .........
0240	e4 b9 89 20 3d 3d 3d 3d  3d 3d 3d 3d 3d 3d 3d 3d   ... ============
0250	0d 0a 63 6f 6e 73 74 65  78 70 72 20 69 6e 74 20   ..constexpr int 
0260	4d 41 54 5f 53 49 5a 45  20 3d 20 32 35 36 3b 0d   MAT_SIZE = 256;.
0270	0a 63 6f 6e 73 74 65 78  70 72 20 69 6e 74 20 4d   .constexpr int M
0280	41 54 5f 45 4c 45 4d 45  4e 54 53 20 3d 20 4d 41   AT_ELEMENTS = MA
0290	54 5f 53 49 5a 45 20 2a  20 4d 41 54 5f 53 49 5a   T_SIZE * MAT_SIZ
02a0	45 3b 0d 0a 63 6f 6e 73  74 65 78 70 72 20 69 6e   E;..constexpr in
02b0	74 20 45 4d 42 45 44 5f  44 49 4d 20 3d 20 31 30   t EMBED_DIM = 10
02c0	32 34 3b 0d 0a 63 6f 6e  73 74 65 78 70 72 20 69   24;..constexpr i
02d0	6e 74 20 4d 41 58 5f 53  45 51 5f 4c 45 4e 47 54   nt MAX_SEQ_LENGT
02e0	48 20 3d 20 35 31 32 3b  0d 0a 63 6f 6e 73 74 65   H = 512;..conste
02f0	78 70 72 20 64 6f 75 62  6c 65 20 50 49 20 3d 20   xpr double PI = 
0300	33 2e 31 34 31 35 39 32  36 35 33 35 38 39 37 39   3.14159265358979
0310	33 32 33 38 34 36 3b 0d  0a 0d 0a 2f 2f 20 3d 3d   323846;....// ==
0320	3d 3d 3d 3d 3d 3d 3d 3d  3d 3d 20 e5 9f ba e7 a1   ========== .....
0330	80 e6 95 b0 e6 8d ae e7  bb 93 e6 9e 84 20 3d 3d   ............. ==
0340	3d 3d 3d 3d 3d 3d 3d 3d  3d 3d 0d 0a 73 74 72 75   ==========..stru
0350	63 74 20 4d 61 74 72 69  78 32 35 36 20 7b 0d 0a   ct Matrix256 {..
0360	20 20 20 20 64 6f 75 62  6c 65 20 64 61 74 61 5b       double data[
0370	4d 41 54 5f 45 4c 45 4d  45 4e 54 53 5d 3b 0d 0a   MAT_ELEMENTS];..
0380	20 20 20 20 76 6f 69 64  20 63 6c 65 61 72 28 29       void clear()
0390	20 7b 20 6d 65 6d 73 65  74 28 64 61 74 61 2c 20    { memset(data, 
03a0	30 2c 20 73 69 7a 65 6f  66 28 64 61 74 61 29 29   0, sizeof(data))
03b0	3b 20 7d 0d 0a 20 20 20  20 4d 61 74 72 69 78 32   ; }..    Matrix2
03c0	35 36 28 29 20 7b 20 63  6c 65 61 72 28 29 3b 20   56() { clear(); 
03d0	7d 0d 0a 7d 3b 0d 0a 0d  0a 73 74 72 75 63 74 20   }..};....struct 
03e0	49 6d 61 67 65 44 61 74  61 20 7b 0d 0a 20 20 20   ImageData {..   
03f0	20 75 6e 73 69 67 6e 65  64 20 63 68 61 72 2a 20    unsigned char* 
0400	70 69 78 65 6c 73 3b 0d  0a 20 20 20 20 69 6e 74   pixels;..    int
0410	20 77 69 64 74 68 3b 0d  0a 20 20 20 20 69 6e 74    width;..    int
0420	20 68 65 69 67 68 74 3b  0d 0a 20 20 20 20 69 6e    height;..    in
0430	74 20 63 68 61 6e 6e 65  6c 73 3b 0d 0a 7d 3b 0d   t channels;..};.
0440	0a 0d 0a 2f 2f 20 3d 3d  3d 3d 3d 3d 3d 3d 3d 3d   ...// ==========
0450	3d 3d 20 44 43 54 e5 8f  98 e6 8d a2 20 3d 3d 3d   == DCT...... ===
0460	3d 3d 3d 3d 3d 3d 3d 3d  3d 0d 0a 76 6f 69 64 20   =========..void 
0470	64 63 74 32 64 28 63 6f  6e 73 74 20 64 6f 75 62   dct2d(const doub
0480	6c 65 2a 20 69 6e 70 75  74 2c 20 64 6f 75 62 6c   le* input, doubl
0490	65 2a 20 6f 75 74 70 75  74 2c 20 69 6e 74 20 73   e* output, int s
04a0	69 7a 65 29 20 7b 0d 0a  20 20 20 20 64 6f 75 62   ize) {..    doub
04b0	6c 65 2a 20 74 65 6d 70  20 3d 20 6e 65 77 20 64   le* temp = new d
04c0	6f 75 62 6c 65 5b 73 69  7a 65 20 2a 20 73 69 7a   ouble[size * siz
04d0	65 5d 3b 0d 0a 0d 0a 20  20 20 20 66 6f 72 20 28   e];....    for (
04e0	69 6e 74 20 69 20 3d 20  30 3b 20 69 20 3c 20 73   int i = 0; i < s
04f0	69 7a 65 3b 20 69 2b 2b  29 20 7b 0d 0a 20 20 20   ize; i++) {..   
0500	20 20 20 20 20 66 6f 72  20 28 69 6e 74 20 75 20        for (int u 
0510	3d 20 30 3b 20 75 20 3c  20 73 69 7a 65 3b 20 75   = 0; u < size; u
0520	2b 2b 29 20 7b 0d 0a 20  20 20 20 20 20 20 20 20   ++) {..         
0530	20 20 20 64 6f 75 62 6c  65 20 73 75 6d 20 3d 20      double sum = 
0540	30 2e 30 3b 0d 0a 20 20  20 20 20 20 20 20 20 20   0.0;..          
0550	20 20 64 6f 75 62 6c 65  20 63 75 20 3d 20 28 75     double cu = (u
0560	20 3d 3d 20 30 29 20 3f  20 73 71 72 74 28 31 2e    == 0) ? sqrt(1.
0570	30 2f 73 69 7a 65 29 20  3a 20 73 71 72 74 28 32   0/size) : sqrt(2
0580	2e 30 2f 73 69 7a 65 29  3b 0d 0a 20 20 20 20 20   .0/size);..     
0590	20 20 20 20 20 20 20 66  6f 72 20 28 69 6e 74 20          for (int 
05a0	78 20 3d 20 30 3b 20 78  20 3c 20 73 69 7a 65 3b   x = 0; x < size;
05b0	20 78 2b 2b 29 20 7b 0d  0a 20 20 20 20 20 20 20    x++) {..       
05c0	20 20 20 20 20 20 20 20  20 73 75 6d 20 2b 3d 20            sum += 
05d0	69 6e 70 75 74 5b 69 2a  73 69 7a 65 20 2b 20 78   input[i*size + x
05e0	5d 20 2a 20 63 6f 73 28  50 49 20 2a 20 75 20 2a   ] * cos(PI * u *
05f0	20 28 32 2a 78 20 2b 20  31 29 20 2f 20 28 32 2e    (2*x + 1) / (2.
0600	30 2a 73 69 7a 65 29 29  3b 0d 0a 20 20 20 20 20   0*size));..     
0610	20 20 20 20 20 20 20 7d  0d 0a 20 20 20 20 20 20          }..      
0620	20 20 20 20 20 20 74 65  6d 70 5b 69 2a 73 69 7a         temp[i*siz
0630	65 20 2b 20 75 5d 20 3d  20 63 75 20 2a 20 73 75   e + u] = cu * su
0640	6d 3b 0d 0a 20 20 20 20  20 20 20 20 7d 0d 0a 20   m;..        }.. 
0650	20 20 20 7d 0d 0a 0d 0a  20 20 20 20 66 6f 72 20      }....    for 
0660	28 69 6e 74 20 6a 20 3d  20 30 3b 20 6a 20 3c 20   (int j = 0; j < 
0670	73 69 7a 65 3b 20 6a 2b  2b 29 20 7b 0d 0a 20 20   size; j++) {..  
0680	20 20 20 20 20 20 66 6f  72 20 28 69 6e 74 20 76         for (int v
0690	20 3d 20 30 3b 20 76 20  3c 20 73 69 7a 65 3b 20    = 0; v < size; 
06a0	76 2b 2b 29 20 7b 0d 0a  20 20 20 20 20 20 20 20   v++) {..        
06b0	20 20 20 20 64 6f 75 62  6c 65 20 73 75 6d 20 3d       double sum =
06c0	20 30 2e 30 3b 0d 0a 20  20 20 20 20 20 20 20 20    0.0;..         
06d0	20 20 20 64 6f 75 62 6c  65 20 63 76 20 3d 20 28      double cv = (
06e0	76 20 3d 3d 20 30 29 20  3f 20 73 71 72 74 28 31   v == 0) ? sqrt(1
06f0	2e 30 2f 73 69 7a 65 29  20 3a 20 73 71 72 74 28   .0/size) : sqrt(
0700	32 2e 30 2f 73 69 7a 65  29 3b 0d 0a 20 20 20 20   2.0/size);..    
0710	20 20 20 20 20 20 20 20  66 6f 72 20 28 69 6e 74           for (int
0720	20 79 20 3d 20 30 3b 20  79 20 3c 20 73 69 7a 65    y = 0; y < size
0730	3b 20 79 2b 2b 29 20 7b  0d 0a 20 20 20 20 20 20   ; y++) {..      
0740	20 20 20 20 20 20 20 20  20 20 73 75 6d 20 2b 3d             sum +=
0750	20 74 65 6d 70 5b 79 2a  73 69 7a 65 20 2b 20 6a    temp[y*size + j
0760	5d 20 2a 20 63 6f 73 28  50 49 20 2a 20 76 20 2a   ] * cos(PI * v *
0770	20 28 32 2a 79 20 2b 20  31 29 20 2f 20 28 32 2e    (2*y + 1) / (2.
0780	30 2a 73 69 7a 65 29 29  3b 0d 0a 20 20 20 20 20   0*size));..     
0790	20 20 20 20 20 20 20 7d  0d 0a 20 20 20 20 20 20          }..      
07a0	20 20 20 20 20 20 6f 75  74 70 75 74 5b 76 2a 73         output[v*s
07b0	69 7a 65 20 2b 20 6a 5d  20 3d 20 63 76 20 2a 20   ize + j] = cv * 
07c0	73 75 6d 3b 0d 0a 20 20  20 20 20 20 20 20 7d 0d   sum;..        }.
07d0	0a 20 20 20 20 7d 0d 0a  0d 0a 20 20 20 20 64 65   .    }....    de
07e0	6c 65 74 65 5b 5d 20 74  65 6d 70 3b 0d 0a 7d 0d   lete[] temp;..}.
07f0	0a 0d 0a 76 6f 69 64 20  69 64 63 74 32 64 28 63   ...void idct2d(c
0800	6f 6e 73 74 20 64 6f 75  62 6c 65 2a 20 69 6e 70   onst double* inp
0810	75 74 2c 20 64 6f 75 62  6c 65 2a 20 6f 75 74 70   ut, double* outp
0820	75 74 2c 20 69 6e 74 20  73 69 7a 65 29 20 7b 0d   ut, int size) {.
0830	0a 20 20 20 20 64 6f 75  62 6c 65 2a 20 74 65 6d   .    double* tem
0840	70 20 3d 20 6e 65 77 20  64 6f 75 62 6c 65 5b 73   p = new double[s
0850	69 7a 65 20 2a 20 73 69  7a 65 5d 3b 0d 0a 0d 0a   ize * size];....
0860	20 20 20 20 66 6f 72 20  28 69 6e 74 20 69 20 3d       for (int i =
0870	20 30 3b 20 69 20 3c 20  73 69 7a 65 3b 20 69 2b    0; i < size; i+
0880	2b 29 20 7b 0d 0a 20 20  20 20 20 20 20 20 66 6f   +) {..        fo
0890	72 20 28 69 6e 74 20 78  20 3d 20 30 3b 20 78 20   r (int x = 0; x 
08a0	3c 20 73 69 7a 65 3b 20  78 2b 2b 29 20 7b 0d 0a   < size; x++) {..
08b0	20 20 20 20 20 20 20 20  20 20 20 20 64 6f 75 62               doub
08c0	6c 65 20 73 75 6d 20 3d  20 30 2e 30 3b 0d 0a 20   le sum = 0.0;.. 
08d0	20 20 20 20 20 20 20 20  20 20 20 66 6f 72 20 28              for (
08e0	69 6e 74 20 75 20 3d 20  30 3b 20 75 20 3c 20 73   int u = 0; u < s
08f0	69 7a 65 3b 20 75 2b 2b  29 20 7b 0d 0a 20 20 20   ize; u++) {..   
0900	20 20 20 20 20 20 20 20  20 20 20 20 20 64 6f 75                dou
0910	62 6c 65 20 63 75 20 3d  20 28 75 20 3d 3d 20 30   ble cu = (u == 0
0920	29 20 3f 20 73 71 72 74  28 31 2e 30 2f 73 69 7a   ) ? sqrt(1.0/siz
0930	65 29 20 3a 20 73 71 72  74 28 32 2e 30 2f 73 69   e) : sqrt(2.0/si
0940	7a 65 29 3b 0d 0a 20 20  20 20 20 20 20 20 20 20   ze);..          
0950	20 20 20 20 20 20 73 75  6d 20 2b 3d 20 63 75 20         sum += cu 
0960	2a 20 69 6e 70 75 74 5b  69 2a 73 69 7a 65 20 2b   * input[i*size +
0970	20 75 5d 20 2a 20 63 6f  73 28 50 49 20 2a 20 75    u] * cos(PI * u
0980	20 2a 20 28 32 2a 78 20  2b 20 31 29 20 2f 20 28    * (2*x + 1) / (
0990	32 2e 30 2a 73 69 7a 65  29 29 3b 0d 0a 20 20 20   2.0*size));..   
09a0	20 20 20 20 20 20 20 20  20 7d 0d 0a 20 20 20 20            }..    
09b0	20 20 20 20 20 20 20 20  74 65 6d 70 5b 69 2a 73           temp[i*s
09c0	69 7a 65 20 2b 20 78 5d  20 3d 20 73 75 6d 3b 0d   ize + x] = sum;.
09d0	0a 20 20 20 20 20 20 20  20 7d 0d 0a 20 20 20 20   .        }..    
09e0	7d 0d 0a 0d 0a 20 20 20  20 66 6f 72 20 28 69 6e   }....    for (in
09f0	74 20 6a 20 3d 20 30 3b  20 6a 20 3c 20 73 69 7a   t j = 0; j < siz
0a00	65 3b 20 6a 2b 2b 29 20  7b 0d 0a 20 20 20 20 20   e; j++) {..     
0a10	20 20 20 66 6f 72 20 28  69 6e 74 20 79 20 3d 20      for (int y = 
0a20	30 3b 20 79 20 3c 20 73  69 7a 65 3b 20 79 2b 2b   0; y < size; y++
0a30	29 20 7b 0d 0a 20 20 20  20 20 20 20 20 20 20 20   ) {..           
0a40	20 64 6f 75 62 6c 65 20  73 75 6d 20 3d 20 30 2e    double sum = 0.
0a50	30 3b 0d 0a 20 20 20 20  20 20 20 20 20 20 20 20   0;..            
0a60	66 6f 72 20 28 69 6e 74  20 76 20 3d 20 30 3b 20   for (int v = 0; 
0a70	76 20 3c 20 73 69 7a 65  3b 20 76 2b 2b 29 20 7b   v < size; v++) {
0a80	0d 0a 20 20 20 20 20 20  20 20 20 20 20 20 20 20   ..              
0a90	20 20 64 6f 75 62 6c 65  20 63 76 20 3d 20 28 76     double cv = (v
0aa0	20 3d 3d 20 30 29 20 3f  20 73 71 72 74 28 31 2e    == 0) ? sqrt(1.
0ab0	30 2f 73 69 7a 65 29 20  3a 20 73 71 72 74 28 32   0/size) : sqrt(2
0ac0	2e 30 2f 73 69 7a 65 29  3b 0d 0a 20 20 20 20 20   .0/size);..     
0ad0	20 20 20 20 20 20 20 20  20 20 20 73 75 6d 20 2b              sum +
0ae0	3d 20 63 76 20 2a 20 74  65 6d 70 5b 76 2a 73 69   = cv * temp[v*si
0af0	7a 65 20 2b 20 6a 5d 20  2a 20 63 6f 73 28 50 49   ze + j] * cos(PI
0b00	20 2a 20 76 20 2a 20 28  32 2a 79 20 2b 20 31 29    * v * (2*y + 1)
0b10	20 2f 20 28 32 2e 30 2a  73 69 7a 65 29 29 3b 0d    / (2.0*size));.
0b20	0a 20 20 20 20 20 20 20  20 20 20 20 20 7d 0d 0a   .            }..
0b30	20 20 20 20 20 20 20 20  20 20 20 20 6f 75 74 70               outp
0b40	75 74 5b 79 2a 73 69 7a  65 20 2b 20 6a 5d 20 3d   ut[y*size + j] =
0b50	20 73 75 6d 3b 0d 0a 20  20 20 20 20 20 20 20 7d    sum;..        }
0b60	0d 0a 20 20 20 20 7d 0d  0a 0d 0a 20 20 20 20 64   ..    }....    d
0b70	65 6c 65 74 65 5b 5d 20  74 65 6d 70 3b 0d 0a 7d   elete[] temp;..}
0b80	0d 0a 0d 0a 2f 2f 20 3d  3d 3d 3d 3d 3d 3d 3d 3d   ....// =========
0b90	3d 3d 3d 20 e5 86 85 e5  ae b9 e7 b1 bb e5 9e 8b   === ............
0ba0	e6 a3 80 e6 b5 8b 20 3d  3d 3d 3d 3d 3d 3d 3d 3d   ...... =========
0bb0	3d 3d 3d 0d 0a 65 6e 75  6d 20 43 6f 6e 74 65 6e   ===..enum Conten
0bc0	74 54 79 70 65 20 7b 0d  0a 20 20 20 20 54 59 50   tType {..    TYP
0bd0	45 5f 4e 41 54 55 52 41  4c 5f 54 45 58 54 2c 0d   E_NATURAL_TEXT,.
0be0	0a 20 20 20 20 54 59 50  45 5f 43 4f 44 45 2c 0d   .    TYPE_CODE,.
0bf0	0a 20 20 20 20 54 59 50  45 5f 4d 49 58 45 44 0d   .    TYPE_MIXED.
0c00	0a 7d 3b 0d 0a 0d 0a 43  6f 6e 74 65 6e 74 54 79   .};....ContentTy
0c10	70 65 20 64 65 74 65 63  74 43 6f 6e 74 65 6e 74   pe detectContent
0c20	54 79 70 65 28 63 6f 6e  73 74 20 63 68 61 72 2a   Type(const char*
0c30	20 74 65 78 74 2c 20 69  6e 74 20 6c 65 6e 67 74    text, int lengt
0c40	68 29 20 7b 0d 0a 20 20  20 20 73 74 64 3a 3a 73   h) {..    std::s
0c50	74 72 69 6e 67 20 63 6f  6e 74 65 6e 74 28 74 65   tring content(te
0c60	78 74 2c 20 73 74 64 3a  3a 6d 69 6e 28 6c 65 6e   xt, std::min(len
0c70	67 74 68 2c 20 35 30 30  30 29 29 3b 0d 0a 0d 0a   gth, 5000));....
0c80	20 20 20 20 69 6e 74 20  63 6f 64 65 5f 69 6e 64       int code_ind
0c90	69 63 61 74 6f 72 73 20  3d 20 30 3b 0d 0a 20 20   icators = 0;..  
0ca0	20 20 63 6f 6e 73 74 20  63 68 61 72 2a 20 63 6f     const char* co
0cb0	64 65 5f 70 61 74 74 65  72 6e 73 5b 5d 20 3d 20   de_patterns[] = 
0cc0	7b 0d 0a 20 20 20 20 20  20 20 20 22 64 65 66 20   {..        "def 
0cd0	22 2c 20 22 63 6c 61 73  73 20 22 2c 20 22 66 75   ", "class ", "fu
0ce0	6e 63 74 69 6f 6e 22 2c  20 22 63 6f 6e 73 74 20   nction", "const 
0cf0	22 2c 20 22 6c 65 74 20  22 2c 20 22 76 61 72 20   ", "let ", "var 
0d00	22 2c 0d 0a 20 20 20 20  20 20 20 20 22 23 69 6e   ",..        "#in
0d10	63 6c 75 64 65 22 2c 20  22 69 6d 70 6f 72 74 20   clude", "import 
0d20	22 2c 20 22 70 75 62 6c  69 63 20 22 2c 20 22 70   ", "public ", "p
0d30	72 69 76 61 74 65 20 22  2c 20 22 76 6f 69 64 20   rivate ", "void 
0d40	22 2c 0d 0a 20 20 20 20  20 20 20 20 22 69 6e 74   ",..        "int
0d50	20 22 2c 20 22 66 6c 6f  61 74 20 22 2c 20 22 72    ", "float ", "r
0d60	65 74 75 72 6e 20 22 2c  20 22 69 66 28 22 2c 20   eturn ", "if(", 
0d70	22 66 6f 72 28 22 2c 20  22 77 68 69 6c 65 28 22   "for(", "while("
0d80	2c 0d 0a 20 20 20 20 20  20 20 20 22 7b 22 2c 20   ,..        "{", 
0d90	22 7d 22 2c 20 22 2f 2f  22 2c 20 22 2f 2a 22 2c   "}", "//", "/*",
0da0	20 22 3d 3e 22 2c 20 22  2d 3e 22 2c 20 6e 75 6c    "=>", "->", nul
0db0	6c 70 74 72 0d 0a 20 20  20 20 7d 3b 0d 0a 0d 0a   lptr..    };....
0dc0	20 20 20 20 66 6f 72 20  28 69 6e 74 20 69 20 3d       for (int i =
0dd0	20 30 3b 20 63 6f 64 65  5f 70 61 74 74 65 72 6e    0; code_pattern
0de0	73 5b 69 5d 20 21 3d 20  6e 75 6c 6c 70 74 72 3b   s[i] != nullptr;
0df0	20 69 2b 2b 29 20 7b 0d  0a 20 20 20 20 20 20 20    i++) {..       
0e00	20 69 66 20 28 63 6f 6e  74 65 6e 74 2e 66 69 6e    if (content.fin
0e10	64 28 63 6f 64 65 5f 70  61 74 74 65 72 6e 73 5b   d(code_patterns[
0e20	69 5d 29 20 21 3d 20 73  74 64 3a 3a 73 74 72 69   i]) != std::stri
0e30	6e 67 3a 3a 6e 70 6f 73  29 20 7b 0d 0a 20 20 20   ng::npos) {..   
0e40	20 20 20 20 20 20 20 20  20 63 6f 64 65 5f 69 6e            code_in
0e50	64 69 63 61 74 6f 72 73  2b 2b 3b 0d 0a 20 20 20   dicators++;..   
0e60	20 20 20 20 20 7d 0d 0a  20 20 20 20 7d 0d 0a 0d        }..    }...
0e70	0a 20 20 20 20 69 6e 74  20 73 70 65 63 69 61 6c   .    int special
0e80	5f 63 68 61 72 73 20 3d  20 30 3b 0d 0a 20 20 20   _chars = 0;..   
0e90	20 69 6e 74 20 61 6c 70  68 61 6e 75 6d 65 72 69    int alphanumeri
0ea0	63 20 3d 20 30 3b 0d 0a  20 20 20 20 66 6f 72 20   c = 0;..    for 
0eb0	28 63 68 61 72 20 63 20  3a 20 63 6f 6e 74 65 6e   (char c : conten
0ec0	74 29 20 7b 0d 0a 20 20  20 20 20 20 20 20 69 66   t) {..        if
0ed0	20 28 63 20 3d 3d 20 27  7b 27 20 7c 7c 20 63 20    (c == '{' || c 
0ee0	3d 3d 20 27 7d 27 20 7c  7c 20 63 20 3d 3d 20 27   == '}' || c == '
0ef0	3b 27 20 7c 7c 20 63 20  3d 3d 20 27 28 27 20 7c   ;' || c == '(' |
0f00	7c 20 63 20 3d 3d 20 27  29 27 29 20 7b 0d 0a 20   | c == ')') {.. 
0f10	20 20 20 20 20 20 20 20  20 20 20 73 70 65 63 69              speci
0f20	61 6c 5f 63 68 61 72 73  2b 2b 3b 0d 0a 20 20 20   al_chars++;..   
0f30	20 20 20 20 20 7d 0d 0a  20 20 20 20 20 20 20 20        }..        
0f40	69 66 20 28 28 63 20 3e  3d 20 27 61 27 20 26 26   if ((c >= 'a' &&
0f50	20 63 20 3c 3d 20 27 7a  27 29 20 7c 7c 20 28 63    c <= 'z') || (c
0f60	20 3e 3d 20 27 41 27 20  26 26 20 63 20 3c 3d 20    >= 'A' && c <= 
0f70	27 5a 27 29 20 7c 7c 0d  0a 20 20 20 20 20 20 20   'Z') ||..       
0f80	20 20 20 20 20 28 63 20  3e 3d 20 27 30 27 20 26        (c >= '0' &
0f90	26 20 63 20 3c 3d 20 27  39 27 29 29 20 7b 0d 0a   & c <= '9')) {..
0fa0	20 20 20 20 20 20 20 20  20 20 20 20 61 6c 70 68               alph
0fb0	61 6e 75 6d 65 72 69 63  2b 2b 3b 0d 0a 20 20 20   anumeric++;..   
0fc0	20 20 20 20 20 7d 0d 0a  20 20 20 20 7d 0d 0a 0d        }..    }...
0fd0	0a 20 20 20 20 64 6f 75  62 6c 65 20 73 70 65 63   .    double spec
0fe0	69 61 6c 5f 72 61 74 69  6f 20 3d 20 28 64 6f 75   ial_ratio = (dou
0ff0	62 6c 65 29 73 70 65 63  69 61 6c 5f 63 68 61 72   ble)special_char
1000	73 20 2f 20 28 61 6c 70  68 61 6e 75 6d 65 72 69   s / (alphanumeri
1010	63 20 2b 20 31 29 3b 0d  0a 0d 0a 20 20 20 20 69   c + 1);....    i
1020	66 20 28 63 6f 64 65 5f  69 6e 64 69 63 61 74 6f   f (code_indicato
1030	72 73 20 3e 20 35 20 7c  7c 20 73 70 65 63 69 61   rs > 5 || specia
1040	6c 5f 72 61 74 69 6f 20  3e 20 30 2e 31 35 29 20   l_ratio > 0.15) 
1050	7b 0d 0a 20 20 20 20 20  20 20 20 72 65 74 75 72   {..        retur
1060	6e 20 54 59 50 45 5f 43  4f 44 45 3b 0d 0a 20 20   n TYPE_CODE;..  
1070	20 20 7d 20 65 6c 73 65  20 69 66 20 28 63 6f 64     } else if (cod
1080	65 5f 69 6e 64 69 63 61  74 6f 72 73 20 3e 20 32   e_indicators > 2
1090	29 20 7b 0d 0a 20 20 20  20 20 20 20 20 72 65 74   ) {..        ret
10a0	75 72 6e 20 54 59 50 45  5f 4d 49 58 45 44 3b 0d   urn TYPE_MIXED;.
10b0	0a 20 20 20 20 7d 0d 0a  0d 0a 20 20 20 20 72 65   .    }....    re
10c0	74 75 72 6e 20 54 59 50  45 5f 4e 41 54 55 52 41   turn TYPE_NATURA
10d0	4c 5f 54 45 58 54 3b 0d  0a 7d 0d 0a 0d 0a 23 69   L_TEXT;..}....#i
10e0	6e 63 6c 75 64 65 20 22  62 70 65 5f 74 6f 6b 65   nclude "bpe_toke
10f0	6e 69 7a 65 72 2e 63 70  70 22 0d 0a 0d 0a 2f 2f   nizer.cpp"....//
1100	20 3d 3d 3d 3d 3d 3d 3d  3d 3d 3d 3d 3d 20 45 35    ============ E5
1110	2d 4c 61 72 67 65 e6 a8  a1 e5 9e 8b 20 3d 3d 3d   -Large...... ===
1120	3d 3d 3d 3d 3d 3d 3d 3d  3d 0d 0a 63 6c 61 73 73   =========..class
1130	20 45 35 4c 61 72 67 65  4d 6f 64 65 6c 20 7b 0d    E5LargeModel {.
1140	0a 70 72 69 76 61 74 65  3a 0d 0a 20 20 20 20 4f   .private:..    O
1150	72 74 3a 3a 45 6e 76 20  65 6e 76 3b 0d 0a 20 20   rt::Env env;..  
1160	20 20 4f 72 74 3a 3a 53  65 73 73 69 6f 6e 2a 20     Ort::Session* 
1170	73 65 73 73 69 6f 6e 3b  0d 0a 20 20 20 20 4f 72   session;..    Or
1180	74 3a 3a 53 65 73 73 69  6f 6e 4f 70 74 69 6f 6e   t::SessionOption
1190	73 20 73 65 73 73 69 6f  6e 5f 6f 70 74 69 6f 6e   s session_option
11a0	73 3b 0d 0a 20 20 20 20  42 50 45 54 6f 6b 65 6e   s;..    BPEToken
11b0	69 7a 65 72 2a 20 74 6f  6b 65 6e 69 7a 65 72 3b   izer* tokenizer;
11c0	0d 0a 20 20 20 20 73 74  64 3a 3a 76 65 63 74 6f   ..    std::vecto
11d0	72 3c 63 6f 6e 73 74 20  63 68 61 72 2a 3e 20 69   r<const char*> i
11e0	6e 70 75 74 5f 6e 6f 64  65 5f 6e 61 6d 65 73 3b   nput_node_names;
11f0	0d 0a 20 20 20 20 73 74  64 3a 3a 76 65 63 74 6f   ..    std::vecto
1200	72 3c 63 6f 6e 73 74 20  63 68 61 72 2a 3e 20 6f   r<const char*> o
1210	75 74 70 75 74 5f 6e 6f  64 65 5f 6e 61 6d 65 73   utput_node_names
1220	3b 0d 0a 0d 0a 20 20 20  20 76 6f 69 64 20 6d 65   ;....    void me
1230	61 6e 50 6f 6f 6c 69 6e  67 28 63 6f 6e 73 74 20   anPooling(const 
1240	66 6c 6f 61 74 2a 20 74  6f 6b 65 6e 5f 65 6d 62   float* token_emb
1250	65 64 64 69 6e 67 73 2c  20 63 6f 6e 73 74 20 69   eddings, const i
1260	6e 74 36 34 5f 74 2a 20  61 74 74 65 6e 74 69 6f   nt64_t* attentio
1270	6e 5f 6d 61 73 6b 2c 0d  0a 20 20 20 20 20 20 20   n_mask,..       
1280	20 20 20 20 20 20 20 20  20 20 20 20 20 20 69 6e                 in
1290	74 20 73 65 71 5f 6c 65  6e 67 74 68 2c 20 64 6f   t seq_length, do
12a0	75 62 6c 65 2a 20 6f 75  74 70 75 74 29 20 7b 0d   uble* output) {.
12b0	0a 20 20 20 20 20 20 20  20 6d 65 6d 73 65 74 28   .        memset(
12c0	6f 75 74 70 75 74 2c 20  30 2c 20 45 4d 42 45 44   output, 0, EMBED
12d0	5f 44 49 4d 20 2a 20 73  69 7a 65 6f 66 28 64 6f   _DIM * sizeof(do
12e0	75 62 6c 65 29 29 3b 0d  0a 20 20 20 20 20 20 20   uble));..       
12f0	20 69 6e 74 20 73 75 6d  5f 6d 61 73 6b 20 3d 20    int sum_mask = 
1300	30 3b 0d 0a 20 20 20 20  20 20 20 20 66 6f 72 20   0;..        for 
1310	28 69 6e 74 20 69 20 3d  20 30 3b 20 69 20 3c 20   (int i = 0; i < 
1320	73 65 71 5f 6c 65 6e 67  74 68 3b 20 69 2b 2b 29   seq_length; i++)
1330	20 7b 0d 0a 20 20 20 20  20 20 20 20 20 20 20 20    {..            
1340	69 66 20 28 61 74 74 65  6e 74 69 6f 6e 5f 6d 61   if (attention_ma
1350	73 6b 5b 69 5d 20 3d 3d  20 31 29 20 7b 0d 0a 20   sk[i] == 1) {.. 
1360	20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 73                  s
1370	75 6d 5f 6d 61 73 6b 2b  2b 3b 0d 0a 20 20 20 20   um_mask++;..    
1380	20 20 20 20 20 20 20 20  20 20 20 20 66 6f 72 20               for 
1390	28 69 6e 74 20 6a 20 3d  20 30 3b 20 6a 20 3c 20   (int j = 0; j < 
13a0	45 4d 42 45 44 5f 44 49  4d 3b 20 6a 2b 2b 29 20   EMBED_DIM; j++) 
13b0	7b 0d 0a 20 20 20 20 20  20 20 20 20 20 20 20 20   {..             
13c0	20 20 20 20 20 20 20 6f  75 74 70 75 74 5b 6a 5d          output[j]
13d0	20 2b 3d 20 28 64 6f 75  62 6c 65 29 74 6f 6b 65    += (double)toke
13e0	6e 5f 65 6d 62 65 64 64  69 6e 67 73 5b 69 20 2a   n_embeddings[i *
13f0	20 45 4d 42 45 44 5f 44  49 4d 20 2b 20 6a 5d 3b    EMBED_DIM + j];
1400	0d 0a 20 20 20 20 20 20  20 20 20 20 20 20 20 20   ..              
1410	20 20 7d 0d 0a 20 20 20  20 20 20 20 20 20 20 20     }..           
1420	20 7d 0d 0a 20 20 20 20  20 20 20 20 7d 0d 0a 20    }..        }.. 
1430	20 20 20 20 20 20 20 69  66 20 28 73 75 6d 5f 6d          if (sum_m
1440	61 73 6b 20 3e 20 30 29  20 7b 0d 0a 20 20 20 20   ask > 0) {..    
1450	20 20 20 20 20 20 20 20  66 6f 72 20 28 69 6e 74           for (int
1460	20 6a 20 3d 20 30 3b 20  6a 20 3c 20 45 4d 42 45    j = 0; j < EMBE
1470	44 5f 44 49 4d 3b 20 6a  2b 2b 29 20 6f 75 74 70   D_DIM; j++) outp
1480	75 74 5b 6a 5d 20 2f 3d  20 73 75 6d 5f 6d 61 73   ut[j] /= sum_mas
1490	6b 3b 0d 0a 20 20 20 20  20 20 20 20 7d 0d 0a 0d   k;..        }...
14a0	0a 20 20 20 20 20 20 20  20 64 6f 75 62 6c 65 20   .        double 
14b0	6e 6f 72 6d 20 3d 20 30  2e 30 3b 0d 0a 20 20 20   norm = 0.0;..   
14c0	20 20 20 20 20 66 6f 72  20 28 69 6e 74 20 6a 20        for (int j 
14d0	3d 20 30 3b 20 6a 20 3c  20 45 4d 42 45 44 5f 44   = 0; j < EMBED_D
14e0	49 4d 3b 20 6a 2b 2b 29  20 6e 6f 72 6d 20 2b 3d   IM; j++) norm +=
14f0	20 6f 75 74 70 75 74 5b  6a 5d 20 2a 20 6f 75 74    output[j] * out
1500	70 75 74 5b 6a 5d 3b 0d  0a 20 20 20 20 20 20 20   put[j];..       
1510	20 6e 6f 72 6d 20 3d 20  73 71 72 74 28 6e 6f 72    norm = sqrt(nor
1520	6d 29 3b 0d 0a 20 20 20  20 20 20 20 20 69 66 20   m);..        if 
1530	28 6e 6f 72 6d 20 3e 20  31 65 2d 36 29 20 7b 0d   (norm > 1e-6) {.
1540	0a 20 20 20 20 20 20 20  20 20 20 20 20 66 6f 72   .            for
1550	20 28 69 6e 74 20 6a 20  3d 20 30 3b 20 6a 20 3c    (int j = 0; j <
1560	20 45 4d 42 45 44 5f 44  49 4d 3b 20 6a 2b 2b 29    EMBED_DIM; j++)
1570	20 6f 75 74 70 75 74 5b  6a 5d 20 2f 3d 20 6e 6f    output[j] /= no
1580	72 6d 3b 0d 0a 20 20 20  20 20 20 20 20 7d 0d 0a   rm;..        }..
1590	20 20 20 20 7d 0d 0a 0d  0a 70 75 62 6c 69 63 3a       }....public:
15a0	0d 0a 20 20 20 20 45 35  4c 61 72 67 65 4d 6f 64   ..    E5LargeMod
15b0	65 6c 28 63 6f 6e 73 74  20 63 68 61 72 2a 20 6d   el(const char* m
15c0	6f 64 65 6c 5f 70 61 74  68 2c 20 63 6f 6e 73 74   odel_path, const
15d0	20 63 68 61 72 2a 20 76  6f 63 61 62 5f 70 61 74    char* vocab_pat
15e0	68 2c 0d 0a 20 20 20 20  20 20 20 20 20 20 20 20   h,..            
15f0	20 20 20 20 20 63 6f 6e  73 74 20 63 68 61 72 2a        const char*
1600	20 6d 65 72 67 65 73 5f  70 61 74 68 2c 20 63 6f    merges_path, co
1610	6e 73 74 20 63 68 61 72  2a 20 73 70 65 63 69 61   nst char* specia
1620	6c 5f 74 6f 6b 65 6e 73  5f 70 61 74 68 29 0d 0a   l_tokens_path)..
1630	20 20 20 20 20 20 20 20  3a 20 65 6e 76 28 4f 52           : env(OR
1640	54 5f 4c 4f 47 47 49 4e  47 5f 4c 45 56 45 4c 5f   T_LOGGING_LEVEL_
1650	57 41 52 4e 49 4e 47 2c  20 22 45 35 4c 61 72 67   WARNING, "E5Larg
1660	65 22 29 2c 20 73 65 73  73 69 6f 6e 28 6e 75 6c   e"), session(nul
1670	6c 70 74 72 29 2c 20 74  6f 6b 65 6e 69 7a 65 72   lptr), tokenizer
1680	28 6e 75 6c 6c 70 74 72  29 20 7b 0d 0a 0d 0a 20   (nullptr) {.... 
1690	20 20 20 20 20 20 20 74  6f 6b 65 6e 69 7a 65 72          tokenizer
16a0	20 3d 20 6e 65 77 20 42  50 45 54 6f 6b 65 6e 69    = new BPETokeni
16b0	7a 65 72 28 76 6f 63 61  62 5f 70 61 74 68 2c 20   zer(vocab_path, 
16c0	6d 65 72 67 65 73 5f 70  61 74 68 2c 20 73 70 65   merges_path, spe
16d0	63 69 61 6c 5f 74 6f 6b  65 6e 73 5f 70 61 74 68   cial_tokens_path
16e0	2c 20 4d 41 58 5f 53 45  51 5f 4c 45 4e 47 54 48   , MAX_SEQ_LENGTH
16f0	29 3b 0d 0a 20 20 20 20  20 20 20 20 73 65 73 73   );..        sess
1700	69 6f 6e 5f 6f 70 74 69  6f 6e 73 2e 53 65 74 49   ion_options.SetI
1710	6e 74 72 61 4f 70 4e 75  6d 54 68 72 65 61 64 73   ntraOpNumThreads
1720	28 34 29 3b 0d 0a 20 20  20 20 20 20 20 20 73 65   (4);..        se
1730	73 73 69 6f 6e 5f 6f 70  74 69 6f 6e 73 2e 53 65   ssion_options.Se
1740	74 47 72 61 70 68 4f 70  74 69 6d 69 7a 61 74 69   tGraphOptimizati
1750	6f 6e 4c 65 76 65 6c 28  47 72 61 70 68 4f 70 74   onLevel(GraphOpt
1760	69 6d 69 7a 61 74 69 6f  6e 4c 65 76 65 6c 3a 3a   imizationLevel::
1770	4f 52 54 5f 45 4e 41 42  4c 45 5f 41 4c 4c 29 3b   ORT_ENABLE_ALL);
1780	0d 0a 0d 0a 20 20 20 20  20 20 20 20 23 69 66 64   ....        #ifd
1790	65 66 20 55 53 45 5f 49  4e 54 45 4c 5f 4e 50 55   ef USE_INTEL_NPU
17a0	0d 0a 20 20 20 20 20 20  20 20 73 65 73 73 69 6f   ..        sessio
17b0	6e 5f 6f 70 74 69 6f 6e  73 2e 41 70 70 65 6e 64   n_options.Append
17c0	45 78 65 63 75 74 69 6f  6e 50 72 6f 76 69 64 65   ExecutionProvide
17d0	72 28 22 4f 70 65 6e 56  49 4e 4f 22 2c 20 7b 7b   r("OpenVINO", {{
17e0	22 64 65 76 69 63 65 5f  74 79 70 65 22 2c 20 22   "device_type", "
17f0	4e 50 55 22 7d 7d 29 3b  0d 0a 20 20 20 20 20 20   NPU"}});..      
1800	20 20 23 65 6e 64 69 66  0d 0a 0d 0a 20 20 20 20     #endif....    
1810	20 20 20 20 23 69 66 64  65 66 20 5f 57 49 4e 33       #ifdef _WIN3
1820	32 0d 0a 20 20 20 20 20  20 20 20 73 74 64 3a 3a   2..        std::
1830	77 73 74 72 69 6e 67 20  77 69 64 65 5f 70 61 74   wstring wide_pat
1840	68 3b 0d 0a 20 20 20 20  20 20 20 20 66 6f 72 20   h;..        for 
1850	28 63 68 61 72 20 63 20  3a 20 73 74 64 3a 3a 73   (char c : std::s
1860	74 72 69 6e 67 28 6d 6f  64 65 6c 5f 70 61 74 68   tring(model_path
1870	29 29 20 77 69 64 65 5f  70 61 74 68 20 2b 3d 20   )) wide_path += 
1880	28 77 63 68 61 72 5f 74  29 63 3b 0d 0a 20 20 20   (wchar_t)c;..   
1890	20 20 20 20 20 73 65 73  73 69 6f 6e 20 3d 20 6e        session = n
18a0	65 77 20 4f 72 74 3a 3a  53 65 73 73 69 6f 6e 28   ew Ort::Session(
18b0	65 6e 76 2c 20 77 69 64  65 5f 70 61 74 68 2e 63   env, wide_path.c
18c0	5f 73 74 72 28 29 2c 20  73 65 73 73 69 6f 6e 5f   _str(), session_
18d0	6f 70 74 69 6f 6e 73 29  3b 0d 0a 20 20 20 20 20   options);..     
18e0	20 20 20 23 65 6c 73 65  0d 0a 20 20 20 20 20 20      #else..      
18f0	20 20 73 65 73 73 69 6f  6e 20 3d 20 6e 65 77 20     session = new 
1900	4f 72 74 3a 3a 53 65 73  73 69 6f 6e 28 65 6e 76   Ort::Session(env
1910	2c 20 6d 6f 64 65 6c 5f  70 61 74 68 2c 20 73 65   , model_path, se
1920	73 73 69 6f 6e 5f 6f 70  74 69 6f 6e 73 29 3b 0d   ssion_options);.
1930	0a 20 20 20 20 20 20 20  20 23 65 6e 64 69 66 0d   .        #endif.
1940	0a 0d 0a 20 20 20 20 20  20 20 20 69 6e 70 75 74   ...        input
1950	5f 6e 6f 64 65 5f 6e 61  6d 65 73 2e 70 75 73 68   _node_names.push
1960	5f 62 61 63 6b 28 22 69  6e 70 75 74 5f 69 64 73   _back("input_ids
1970	22 29 3b 0d 0a 20 20 20  20 20 20 20 20 69 6e 70   ");..        inp
1980	75 74 5f 6e 6f 64 65 5f  6e 61 6d 65 73 2e 70 75   ut_node_names.pu
1990	73 68 5f 62 61 63 6b 28  22 61 74 74 65 6e 74 69   sh_back("attenti
19a0	6f 6e 5f 6d 61 73 6b 22  29 3b 0d 0a 20 20 20 20   on_mask");..    
19b0	20 20 20 20 6f 75 74 70  75 74 5f 6e 6f 64 65 5f       output_node_
19c0	6e 61 6d 65 73 2e 70 75  73 68 5f 62 61 63 6b 28   names.push_back(
19d0	22 6c 61 73 74 5f 68 69  64 64 65 6e 5f 73 74 61   "last_hidden_sta
19e0	74 65 22 29 3b 0d 0a 20  20 20 20 7d 0d 0a 0d 0a   te");..    }....
19f0	20 20 20 20 7e 45 35 4c  61 72 67 65 4d 6f 64 65       ~E5LargeMode
1a00	6c 28 29 20 7b 0d 0a 20  20 20 20 20 20 20 20 69   l() {..        i
1a10	66 20 28 73 65 73 73 69  6f 6e 29 20 64 65 6c 65   f (session) dele
1a20	74 65 20 73 65 73 73 69  6f 6e 3b 0d 0a 20 20 20   te session;..   
1a30	20 20 20 20 20 69 66 20  28 74 6f 6b 65 6e 69 7a        if (tokeniz
1a40	65 72 29 20 64 65 6c 65  74 65 20 74 6f 6b 65 6e   er) delete token
1a50	69 7a 65 72 3b 0d 0a 20  20 20 20 7d 0d 0a 0d 0a   izer;..    }....
1a60	20 20 20 20 62 6f 6f 6c  20 67 65 74 45 6d 62 65       bool getEmbe
1a70	64 64 69 6e 67 28 63 6f  6e 73 74 20 63 68 61 72   dding(const char
1a80	2a 20 74 65 78 74 2c 20  69 6e 74 20 73 74 61 72   * text, int star
1a90	74 2c 20 69 6e 74 20 65  6e 64 2c 20 64 6f 75 62   t, int end, doub
1aa0	6c 65 2a 20 65 6d 62 65  64 64 69 6e 67 29 20 7b   le* embedding) {
1ab0	0d 0a 20 20 20 20 20 20  20 20 69 66 20 28 21 73   ..        if (!s
1ac0	65 73 73 69 6f 6e 20 7c  7c 20 21 74 6f 6b 65 6e   ession || !token
1ad0	69 7a 65 72 29 20 72 65  74 75 72 6e 20 66 61 6c   izer) return fal
1ae0	73 65 3b 0d 0a 0d 0a 20  20 20 20 20 20 20 20 73   se;....        s
1af0	74 64 3a 3a 76 65 63 74  6f 72 3c 69 6e 74 3e 20   td::vector<int> 
1b00	69 6e 70 75 74 5f 69 64  73 3b 0d 0a 20 20 20 20   input_ids;..    
1b10	20 20 20 20 73 74 64 3a  3a 76 65 63 74 6f 72 3c       std::vector<
1b20	69 6e 74 3e 20 61 74 74  65 6e 74 69 6f 6e 5f 6d   int> attention_m
1b30	61 73 6b 3b 0d 0a 20 20  20 20 20 20 20 20 69 66   ask;..        if
1b40	20 28 21 74 6f 6b 65 6e  69 7a 65 72 2d 3e 65 6e    (!tokenizer->en
1b50	63 6f 64 65 28 74 65 78  74 2c 20 73 74 61 72 74   code(text, start
1b60	2c 20 65 6e 64 2c 20 69  6e 70 75 74 5f 69 64 73   , end, input_ids
1b70	2c 20 61 74 74 65 6e 74  69 6f 6e 5f 6d 61 73 6b   , attention_mask
1b80	29 29 20 72 65 74 75 72  6e 20 66 61 6c 73 65 3b   )) return false;
1b90	0d 0a 0d 0a 20 20 20 20  20 20 20 20 73 74 64 3a   ....        std:
1ba0	3a 76 65 63 74 6f 72 3c  69 6e 74 36 34 5f 74 3e   :vector<int64_t>
1bb0	20 69 6e 70 75 74 5f 73  68 61 70 65 20 3d 20 7b    input_shape = {
1bc0	31 2c 20 4d 41 58 5f 53  45 51 5f 4c 45 4e 47 54   1, MAX_SEQ_LENGT
1bd0	48 7d 3b 0d 0a 20 20 20  20 20 20 20 20 4f 72 74   H};..        Ort
1be0	3a 3a 4d 65 6d 6f 72 79  49 6e 66 6f 20 6d 65 6d   ::MemoryInfo mem
1bf0	6f 72 79 5f 69 6e 66 6f  20 3d 20 4f 72 74 3a 3a   ory_info = Ort::
1c00	4d 65 6d 6f 72 79 49 6e  66 6f 3a 3a 43 72 65 61   MemoryInfo::Crea
1c10	74 65 43 70 75 28 4f 72  74 41 72 65 6e 61 41 6c   teCpu(OrtArenaAl
1c20	6c 6f 63 61 74 6f 72 2c  20 4f 72 74 4d 65 6d 54   locator, OrtMemT
1c30	79 70 65 44 65 66 61 75  6c 74 29 3b 0d 0a 0d 0a   ypeDefault);....
1c40	20 20 20 20 20 20 20 20  6c 6c 20 64 61 74 61 20           ll data 
1c50	3d 20 2a 69 6e 70 75 74  5f 69 64 73 2e 64 61 74   = *input_ids.dat
1c60	61 28 29 3b 0d 0a 20 20  20 20 20 20 20 20 4f 72   a();..        Or
1c70	74 3a 3a 56 61 6c 75 65  20 69 6e 70 75 74 5f 69   t::Value input_i
1c80	64 73 5f 74 65 6e 73 6f  72 20 3d 20 4f 72 74 3a   ds_tensor = Ort:
1c90	3a 56 61 6c 75 65 3a 3a  43 72 65 61 74 65 54 65   :Value::CreateTe
1ca0	6e 73 6f 72 3c 69 6e 74  36 34 5f 74 3e 28 0d 0a   nsor<int64_t>(..
1cb0	20 20 20 20 20 20 20 20  20 20 20 20 6d 65 6d 6f               memo
1cc0	72 79 5f 69 6e 66 6f 2c  20 26 64 61 74 61 2c 20   ry_info, &data, 
1cd0	69 6e 70 75 74 5f 69 64  73 2e 73 69 7a 65 28 29   input_ids.size()
1ce0	2c 20 69 6e 70 75 74 5f  73 68 61 70 65 2e 64 61   , input_shape.da
1cf0	74 61 28 29 2c 20 69 6e  70 75 74 5f 73 68 61 70   ta(), input_shap
1d00	65 2e 73 69 7a 65 28 29  29 3b 0d 0a 20 20 20 20   e.size());..    
1d10	20 20 20 20 4f 72 74 3a  3a 56 61 6c 75 65 20 61       Ort::Value a
1d20	74 74 65 6e 74 69 6f 6e  5f 6d 61 73 6b 5f 74 65   ttention_mask_te
1d30	6e 73 6f 72 20 3d 20 4f  72 74 3a 3a 56 61 6c 75   nsor = Ort::Valu
1d40	65 3a 3a 43 72 65 61 74  65 54 65 6e 73 6f 72 3c   e::CreateTensor<
1d50	69 6e 74 36 34 5f 74 3e  28 0d 0a 20 20 20 20 20   int64_t>(..     
1d60	20 20 20 20 20 20 20 6d  65 6d 6f 72 79 5f 69 6e          memory_in
1d70	66 6f 2c 20 26 64 61 74  61 2c 20 61 74 74 65 6e   fo, &data, atten
1d80	74 69 6f 6e 5f 6d 61 73  6b 2e 73 69 7a 65 28 29   tion_mask.size()
1d90	2c 20 69 6e 70 75 74 5f  73 68 61 70 65 2e 64 61   , input_shape.da
1da0	74 61 28 29 2c 20 69 6e  70 75 74 5f 73 68 61 70   ta(), input_shap
1db0	65 2e 73 69 7a 65 28 29  29 3b 0d 0a 0d 0a 20 20   e.size());....  
1dc0	20 20 20 20 20 20 73 74  64 3a 3a 76 65 63 74 6f         std::vecto
1dd0	72 3c 4f 72 74 3a 3a 56  61 6c 75 65 3e 20 69 6e   r<Ort::Value> in
1de0	70 75 74 5f 74 65 6e 73  6f 72 73 3b 0d 0a 20 20   put_tensors;..  
1df0	20 20 20 20 20 20 69 6e  70 75 74 5f 74 65 6e 73         input_tens
1e00	6f 72 73 2e 70 75 73 68  5f 62 61 63 6b 28 73 74   ors.push_back(st
1e10	64 3a 3a 6d 6f 76 65 28  69 6e 70 75 74 5f 69 64   d::move(input_id
1e20	73 5f 74 65 6e 73 6f 72  29 29 3b 0d 0a 20 20 20   s_tensor));..   
1e30	20 20 20 20 20 69 6e 70  75 74 5f 74 65 6e 73 6f        input_tenso
1e40	72 73 2e 70 75 73 68 5f  62 61 63 6b 28 73 74 64   rs.push_back(std
1e50	3a 3a 6d 6f 76 65 28 61  74 74 65 6e 74 69 6f 6e   ::move(attention
1e60	5f 6d 61 73 6b 5f 74 65  6e 73 6f 72 29 29 3b 0d   _mask_tensor));.
1e70	0a 0d 0a 20 20 20 20 20  20 20 20 61 75 74 6f 20   ...        auto 
1e80	6f 75 74 70 75 74 5f 74  65 6e 73 6f 72 73 20 3d   output_tensors =
1e90	20 73 65 73 73 69 6f 6e  2d 3e 52 75 6e 28 4f 72    session->Run(Or
1ea0	74 3a 3a 52 75 6e 4f 70  74 69 6f 6e 73 7b 6e 75   t::RunOptions{nu
1eb0	6c 6c 70 74 72 7d 2c 0d  0a 20 20 20 20 20 20 20   llptr},..       
1ec0	20 20 20 20 20 69 6e 70  75 74 5f 6e 6f 64 65 5f        input_node_
1ed0	6e 61 6d 65 73 2e 64 61  74 61 28 29 2c 20 69 6e   names.data(), in
1ee0	70 75 74 5f 74 65 6e 73  6f 72 73 2e 64 61 74 61   put_tensors.data
1ef0	28 29 2c 20 69 6e 70 75  74 5f 74 65 6e 73 6f 72   (), input_tensor
1f00	73 2e 73 69 7a 65 28 29  2c 0d 0a 20 20 20 20 20   s.size(),..     
1f10	20 20 20 20 20 20 20 6f  75 74 70 75 74 5f 6e 6f          output_no
1f20	64 65 5f 6e 61 6d 65 73  2e 64 61 74 61 28 29 2c   de_names.data(),
1f30	20 6f 75 74 70 75 74 5f  6e 6f 64 65 5f 6e 61 6d    output_node_nam
1f40	65 73 2e 73 69 7a 65 28  29 29 3b 0d 0a 0d 0a 20   es.size());.... 
1f50	20 20 20 20 20 20 20 66  6c 6f 61 74 2a 20 6f 75          float* ou
1f60	74 70 75 74 5f 64 61 74  61 20 3d 20 6f 75 74 70   tput_data = outp
1f70	75 74 5f 74 65 6e 73 6f  72 73 5b 30 5d 2e 47 65   ut_tensors[0].Ge
1f80	74 54 65 6e 73 6f 72 4d  75 74 61 62 6c 65 44 61   tTensorMutableDa
1f90	74 61 3c 66 6c 6f 61 74  3e 28 29 3b 0d 0a 20 20   ta<float>();..  
1fa0	20 20 20 20 20 20 69 6e  74 36 34 5f 74 20 61 6d         int64_t am
1fb0	64 61 74 61 20 3d 20 2a  61 74 74 65 6e 74 69 6f   data = *attentio
1fc0	6e 5f 6d 61 73 6b 2e 64  61 74 61 28 29 3b 0d 0a   n_mask.data();..
1fd0	20 20 20 20 20 20 20 20  6d 65 61 6e 50 6f 6f 6c           meanPool
1fe0	69 6e 67 28 6f 75 74 70  75 74 5f 64 61 74 61 2c   ing(output_data,
1ff0	20 26 61 6d 64 61 74 61  2c 20 4d 41 58 5f 53 45    &amdata, MAX_SE
2000	51 5f 4c 45 4e 47 54 48  2c 20 65 6d 62 65 64 64   Q_LENGTH, embedd
2010	69 6e 67 29 3b 0d 0a 20  20 20 20 20 20 20 20 72   ing);..        r
2020	65 74 75 72 6e 20 74 72  75 65 3b 0d 0a 20 20 20   eturn true;..   
2030	20 7d 0d 0a 0d 0a 20 20  20 20 73 69 7a 65 5f 74    }....    size_t
2040	20 67 65 74 56 6f 63 61  62 53 69 7a 65 28 29 20    getVocabSize() 
2050	63 6f 6e 73 74 20 7b 20  72 65 74 75 72 6e 20 74   const { return t
2060	6f 6b 65 6e 69 7a 65 72  20 3f 20 74 6f 6b 65 6e   okenizer ? token
2070	69 7a 65 72 2d 3e 67 65  74 56 6f 63 61 62 53 69   izer->getVocabSi
2080	7a 65 28 29 20 3a 20 30  3b 20 7d 0d 0a 7d 3b 0d   ze() : 0; }..};.
2090	0a 0d 0a 2f 2f 20 3d 3d  3d 3d 3d 3d 3d 3d 3d 3d   ...// ==========
20a0	3d 3d 20 e8 af ad e4 b9  89 e5 90 91 e9 87 8f e5   == .............
20b0	8e 8b e7 bc a9 20 3d 3d  3d 3d 3d 3d 3d 3d 3d 3d   ..... ==========
20c0	3d 3d 0d 0a 4d 61 74 72  69 78 32 35 36 2a 20 63   ==..Matrix256* c
20d0	6f 6d 70 72 65 73 73 53  65 6d 61 6e 74 69 63 56   ompressSemanticV
20e0	65 63 74 6f 72 28 63 6f  6e 73 74 20 64 6f 75 62   ector(const doub
20f0	6c 65 2a 20 76 65 63 5f  31 30 32 34 64 29 20 7b   le* vec_1024d) {
2100	0d 0a 20 20 20 20 69 66  20 28 21 76 65 63 5f 31   ..    if (!vec_1
2110	30 32 34 64 29 20 72 65  74 75 72 6e 20 6e 75 6c   024d) return nul
2120	6c 70 74 72 3b 0d 0a 20  20 20 20 4d 61 74 72 69   lptr;..    Matri
2130	78 32 35 36 2a 20 6d 61  74 20 3d 20 6e 65 77 20   x256* mat = new 
2140	4d 61 74 72 69 78 32 35  36 28 29 3b 0d 0a 0d 0a   Matrix256();....
2150	20 20 20 20 69 6e 74 20  72 65 70 65 61 74 5f 66       int repeat_f
2160	61 63 74 6f 72 20 3d 20  4d 41 54 5f 45 4c 45 4d   actor = MAT_ELEM
2170	45 4e 54 53 20 2f 20 45  4d 42 45 44 5f 44 49 4d   ENTS / EMBED_DIM
2180	3b 0d 0a 20 20 20 20 69  6e 74 20 69 64 78 20 3d   ;..    int idx =
2190	20 30 3b 0d 0a 20 20 20  20 66 6f 72 20 28 69 6e    0;..    for (in
21a0	74 20 69 20 3d 20 30 3b  20 69 20 3c 20 45 4d 42   t i = 0; i < EMB
21b0	45 44 5f 44 49 4d 3b 20  69 2b 2b 29 20 7b 0d 0a   ED_DIM; i++) {..
21c0	20 20 20 20 20 20 20 20  66 6f 72 20 28 69 6e 74           for (int
21d0	20 6a 20 3d 20 30 3b 20  6a 20 3c 20 72 65 70 65    j = 0; j < repe
21e0	61 74 5f 66 61 63 74 6f  72 20 26 26 20 69 64 78   at_factor && idx
21f0	20 3c 20 4d 41 54 5f 45  4c 45 4d 45 4e 54 53 3b    < MAT_ELEMENTS;
2200	20 6a 2b 2b 29 20 7b 0d  0a 20 20 20 20 20 20 20    j++) {..       
2210	20 20 20 20 20 6d 61 74  2d 3e 64 61 74 61 5b 69        mat->data[i
2220	64 78 2b 2b 5d 20 3d 20  76 65 63 5f 31 30 32 34   dx++] = vec_1024
2230	64 5b 69 5d 3b 0d 0a 20  20 20 20 20 20 20 20 7d   d[i];..        }
2240	0d 0a 20 20 20 20 7d 0d  0a 0d 0a 20 20 20 20 64   ..    }....    d
2250	6f 75 62 6c 65 2a 20 73  6d 6f 6f 74 68 65 64 20   ouble* smoothed 
2260	3d 20 6e 65 77 20 64 6f  75 62 6c 65 5b 4d 41 54   = new double[MAT
2270	5f 45 4c 45 4d 45 4e 54  53 5d 3b 0d 0a 20 20 20   _ELEMENTS];..   
2280	20 63 6f 6e 73 74 20 64  6f 75 62 6c 65 20 67 61    const double ga
2290	75 73 73 69 61 6e 5b 39  5d 20 3d 20 7b 30 2e 30   ussian[9] = {0.0
22a0	36 32 35 2c 20 30 2e 31  32 35 2c 20 30 2e 30 36   625, 0.125, 0.06
22b0	32 35 2c 20 30 2e 31 32  35 2c 20 30 2e 32 35 2c   25, 0.125, 0.25,
22c0	20 30 2e 31 32 35 2c 20  30 2e 30 36 32 35 2c 20    0.125, 0.0625, 
22d0	30 2e 31 32 35 2c 20 30  2e 30 36 32 35 7d 3b 0d   0.125, 0.0625};.
22e0	0a 0d 0a 20 20 20 20 66  6f 72 20 28 69 6e 74 20   ...    for (int 
22f0	69 20 3d 20 30 3b 20 69  20 3c 20 4d 41 54 5f 53   i = 0; i < MAT_S
2300	49 5a 45 3b 20 69 2b 2b  29 20 7b 0d 0a 20 20 20   IZE; i++) {..   
2310	20 20 20 20 20 66 6f 72  20 28 69 6e 74 20 6a 20        for (int j 
2320	3d 20 30 3b 20 6a 20 3c  20 4d 41 54 5f 53 49 5a   = 0; j < MAT_SIZ
2330	45 3b 20 6a 2b 2b 29 20  7b 0d 0a 20 20 20 20 20   E; j++) {..     
2340	20 20 20 20 20 20 20 64  6f 75 62 6c 65 20 73 75          double su
2350	6d 20 3d 20 30 2e 30 3b  0d 0a 20 20 20 20 20 20   m = 0.0;..      
2360	20 20 20 20 20 20 66 6f  72 20 28 69 6e 74 20 6b         for (int k
2370	69 20 3d 20 2d 31 3b 20  6b 69 20 3c 3d 20 31 3b   i = -1; ki <= 1;
2380	20 6b 69 2b 2b 29 20 7b  0d 0a 20 20 20 20 20 20    ki++) {..      
2390	20 20 20 20 20 20 20 20  20 20 66 6f 72 20 28 69             for (i
23a0	6e 74 20 6b 6a 20 3d 20  2d 31 3b 20 6b 6a 20 3c   nt kj = -1; kj <
23b0	3d 20 31 3b 20 6b 6a 2b  2b 29 20 7b 0d 0a 20 20   = 1; kj++) {..  
23c0	20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20                   
23d0	20 20 69 6e 74 20 6e 69  20 3d 20 69 20 2b 20 6b     int ni = i + k
23e0	69 2c 20 6e 6a 20 3d 20  6a 20 2b 20 6b 6a 3b 0d   i, nj = j + kj;.
23f0	0a 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20   .               
2400	20 20 20 20 20 69 66 20  28 6e 69 20 3e 3d 20 30        if (ni >= 0
2410	20 26 26 20 6e 69 20 3c  20 4d 41 54 5f 53 49 5a    && ni < MAT_SIZ
2420	45 20 26 26 20 6e 6a 20  3e 3d 20 30 20 26 26 20   E && nj >= 0 && 
2430	6e 6a 20 3c 20 4d 41 54  5f 53 49 5a 45 29 20 7b   nj < MAT_SIZE) {
2440	0d 0a 20 20 20 20 20 20  20 20 20 20 20 20 20 20   ..              
2450	20 20 20 20 20 20 20 20  20 20 73 75 6d 20 2b 3d             sum +=
2460	20 6d 61 74 2d 3e 64 61  74 61 5b 6e 69 20 2a 20    mat->data[ni * 
2470	4d 41 54 5f 53 49 5a 45  20 2b 20 6e 6a 5d 20 2a   MAT_SIZE + nj] *
2480	20 67 61 75 73 73 69 61  6e 5b 28 6b 69 2b 31 29    gaussian[(ki+1)
2490	2a 33 20 2b 20 28 6b 6a  2b 31 29 5d 3b 0d 0a 20   *3 + (kj+1)];.. 
24a0	20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20                   
24b0	20 20 20 7d 0d 0a 20 20  20 20 20 20 20 20 20 20      }..          
24c0	20 20 20 20 20 20 7d 0d  0a 20 20 20 20 20 20 20         }..       
24d0	20 20 20 20 20 7d 0d 0a  20 20 20 20 20 20 20 20        }..        
24e0	20 20 20 20 73 6d 6f 6f  74 68 65 64 5b 69 20 2a       smoothed[i *
24f0	20 4d 41 54 5f 53 49 5a  45 20 2b 20 6a 5d 20 3d    MAT_SIZE + j] =
2500	20 73 75 6d 3b 0d 0a 20  20 20 20 20 20 20 20 7d    sum;..        }
2510	0d 0a 20 20 20 20 7d 0d  0a 0d 0a 20 20 20 20 6d   ..    }....    m
2520	65 6d 63 70 79 28 6d 61  74 2d 3e 64 61 74 61 2c   emcpy(mat->data,
2530	20 73 6d 6f 6f 74 68 65  64 2c 20 4d 41 54 5f 45    smoothed, MAT_E
2540	4c 45 4d 45 4e 54 53 20  2a 20 73 69 7a 65 6f 66   LEMENTS * sizeof
2550	28 64 6f 75 62 6c 65 29  29 3b 0d 0a 20 20 20 20   (double));..    
2560	64 65 6c 65 74 65 5b 5d  20 73 6d 6f 6f 74 68 65   delete[] smoothe
2570	64 3b 0d 0a 0d 0a 20 20  20 20 64 6f 75 62 6c 65   d;....    double
2580	2a 20 74 65 6d 70 20 3d  20 6e 65 77 20 64 6f 75   * temp = new dou
2590	62 6c 65 5b 4d 41 54 5f  45 4c 45 4d 45 4e 54 53   ble[MAT_ELEMENTS
25a0	5d 3b 0d 0a 20 20 20 20  6d 65 6d 63 70 79 28 74   ];..    memcpy(t
25b0	65 6d 70 2c 20 6d 61 74  2d 3e 64 61 74 61 2c 20   emp, mat->data, 
25c0	4d 41 54 5f 45 4c 45 4d  45 4e 54 53 20 2a 20 73   MAT_ELEMENTS * s
25d0	69 7a 65 6f 66 28 64 6f  75 62 6c 65 29 29 3b 0d   izeof(double));.
25e0	0a 20 20 20 20 64 63 74  32 64 28 74 65 6d 70 2c   .    dct2d(temp,
25f0	20 6d 61 74 2d 3e 64 61  74 61 2c 20 4d 41 54 5f    mat->data, MAT_
2600	53 49 5a 45 29 3b 0d 0a  20 20 20 20 64 65 6c 65   SIZE);..    dele
2610	74 65 5b 5d 20 74 65 6d  70 3b 0d 0a 20 20 20 20   te[] temp;..    
2620	72 65 74 75 72 6e 20 6d  61 74 3b 0d 0a 7d 0d 0a   return mat;..}..
2630	0d 0a 2f 2f 20 3d 3d 3d  3d 3d 3d 3d 3d 3d 3d 3d   ..// ===========
2640	3d 20 e7 bb 9f e4 b8 80  e8 be 93 e5 85 a5 e5 a4   = ..............
2650	84 e7 90 86 e5 99 a8 20  3d 3d 3d 3d 3d 3d 3d 3d   ....... ========
2660	3d 3d 3d 3d 0d 0a 63 6c  61 73 73 20 55 6e 69 66   ====..class Unif
2670	69 65 64 49 6e 70 75 74  50 72 6f 63 65 73 73 6f   iedInputProcesso
2680	72 20 7b 0d 0a 70 72 69  76 61 74 65 3a 0d 0a 20   r {..private:.. 
2690	20 20 20 73 74 72 75 63  74 20 4e 6f 64 65 20 7b      struct Node {
26a0	0d 0a 20 20 20 20 20 20  20 20 64 6f 75 62 6c 65   ..        double
26b0	2a 20 65 6d 62 65 64 64  69 6e 67 3b 0d 0a 20 20   * embedding;..  
26c0	20 20 20 20 20 20 64 6f  75 62 6c 65 20 61 74 74         double att
26d0	65 6e 74 69 6f 6e 3b 0d  0a 20 20 20 20 20 20 20   ention;..       
26e0	20 64 6f 75 62 6c 65 20  69 6d 70 6f 72 74 61 6e    double importan
26f0	63 65 3b 0d 0a 20 20 20  20 20 20 20 20 69 6e 74   ce;..        int
2700	20 73 74 61 72 74 5f 70  6f 73 2c 20 65 6e 64 5f    start_pos, end_
2710	70 6f 73 3b 0d 0a 20 20  20 20 20 20 20 20 4e 6f   pos;..        No
2720	64 65 28 29 20 3a 20 65  6d 62 65 64 64 69 6e 67   de() : embedding
2730	28 6e 75 6c 6c 70 74 72  29 2c 20 61 74 74 65 6e   (nullptr), atten
2740	74 69 6f 6e 28 31 2e 30  29 2c 20 69 6d 70 6f 72   tion(1.0), impor
2750	74 61 6e 63 65 28 31 2e  30 29 2c 20 73 74 61 72   tance(1.0), star
2760	74 5f 70 6f 73 28 30 29  2c 20 65 6e 64 5f 70 6f   t_pos(0), end_po
2770	73 28 30 29 20 7b 7d 0d  0a 20 20 20 20 20 20 20   s(0) {}..       
2780	20 7e 4e 6f 64 65 28 29  20 7b 20 69 66 20 28 65    ~Node() { if (e
2790	6d 62 65 64 64 69 6e 67  29 20 64 65 6c 65 74 65   mbedding) delete
27a0	5b 5d 20 65 6d 62 65 64  64 69 6e 67 3b 20 7d 0d   [] embedding; }.
27b0	0a 20 20 20 20 7d 3b 0d  0a 0d 0a 20 20 20 20 45   .    };....    E
27c0	35 4c 61 72 67 65 4d 6f  64 65 6c 2a 20 6d 6f 64   5LargeModel* mod
27d0	65 6c 3b 0d 0a 20 20 20  20 4e 6f 64 65 2a 20 6e   el;..    Node* n
27e0	6f 64 65 73 3b 0d 0a 20  20 20 20 69 6e 74 20 6e   odes;..    int n
27f0	6f 64 65 5f 63 6f 75 6e  74 2c 20 63 61 70 61 63   ode_count, capac
2800	69 74 79 2c 20 63 75 72  72 65 6e 74 5f 65 78 74   ity, current_ext
2810	72 61 63 74 5f 69 64 78  3b 0d 0a 20 20 20 20 64   ract_idx;..    d
2820	6f 75 62 6c 65 2a 20 67  6c 6f 62 61 6c 5f 73 65   ouble* global_se
2830	6d 61 6e 74 69 63 5f 76  65 63 74 6f 72 3b 0d 0a   mantic_vector;..
2840	20 20 20 20 43 6f 6e 74  65 6e 74 54 79 70 65 20       ContentType 
2850	63 6f 6e 74 65 6e 74 5f  74 79 70 65 3b 0d 0a 0d   content_type;...
2860	0a 20 20 20 20 62 6f 6f  6c 20 70 72 6f 63 65 73   .    bool proces
2870	73 43 6f 64 65 43 6f 6e  74 65 6e 74 28 63 6f 6e   sCodeContent(con
2880	73 74 20 63 68 61 72 2a  20 74 65 78 74 2c 20 69   st char* text, i
2890	6e 74 20 6c 65 6e 67 74  68 29 20 7b 0d 0a 20 20   nt length) {..  
28a0	20 20 20 20 20 20 69 6e  74 20 63 68 75 6e 6b 5f         int chunk_
28b0	73 69 7a 65 20 3d 20 31  35 30 30 3b 0d 0a 20 20   size = 1500;..  
28c0	20 20 20 20 20 20 66 6f  72 20 28 69 6e 74 20 70         for (int p
28d0	6f 73 20 3d 20 30 3b 20  70 6f 73 20 3c 20 6c 65   os = 0; pos < le
28e0	6e 67 74 68 20 26 26 20  6e 6f 64 65 5f 63 6f 75   ngth && node_cou
28f0	6e 74 20 3c 20 63 61 70  61 63 69 74 79 3b 20 70   nt < capacity; p
2900	6f 73 20 2b 3d 20 63 68  75 6e 6b 5f 73 69 7a 65   os += chunk_size
2910	29 20 7b 0d 0a 20 20 20  20 20 20 20 20 20 20 20   ) {..           
2920	20 69 6e 74 20 65 6e 64  5f 70 6f 73 20 3d 20 73    int end_pos = s
2930	74 64 3a 3a 6d 69 6e 28  70 6f 73 20 2b 20 63 68   td::min(pos + ch
2940	75 6e 6b 5f 73 69 7a 65  2c 20 6c 65 6e 67 74 68   unk_size, length
2950	29 3b 0d 0a 20 20 20 20  20 20 20 20 20 20 20 20   );..            
2960	6e 6f 64 65 73 5b 6e 6f  64 65 5f 63 6f 75 6e 74   nodes[node_count
2970	5d 2e 65 6d 62 65 64 64  69 6e 67 20 3d 20 6e 65   ].embedding = ne
2980	77 20 64 6f 75 62 6c 65  5b 45 4d 42 45 44 5f 44   w double[EMBED_D
2990	49 4d 5d 3b 0d 0a 20 20  20 20 20 20 20 20 20 20   IM];..          
29a0	20 20 6e 6f 64 65 73 5b  6e 6f 64 65 5f 63 6f 75     nodes[node_cou
29b0	6e 74 5d 2e 73 74 61 72  74 5f 70 6f 73 20 3d 20   nt].start_pos = 
29c0	70 6f 73 3b 0d 0a 20 20  20 20 20 20 20 20 20 20   pos;..          
29d0	20 20 6e 6f 64 65 73 5b  6e 6f 64 65 5f 63 6f 75     nodes[node_cou
29e0	6e 74 5d 2e 65 6e 64 5f  70 6f 73 20 3d 20 65 6e   nt].end_pos = en
29f0	64 5f 70 6f 73 3b 0d 0a  0d 0a 20 20 20 20 20 20   d_pos;....      
2a00	20 20 20 20 20 20 69 66  20 28 21 6d 6f 64 65 6c         if (!model
2a10	2d 3e 67 65 74 45 6d 62  65 64 64 69 6e 67 28 74   ->getEmbedding(t
2a20	65 78 74 2c 20 70 6f 73  2c 20 65 6e 64 5f 70 6f   ext, pos, end_po
2a30	73 2c 20 6e 6f 64 65 73  5b 6e 6f 64 65 5f 63 6f   s, nodes[node_co
2a40	75 6e 74 5d 2e 65 6d 62  65 64 64 69 6e 67 29 29   unt].embedding))
2a50	20 7b 0d 0a 20 20 20 20  20 20 20 20 20 20 20 20    {..            
2a60	20 20 20 20 64 65 6c 65  74 65 5b 5d 20 6e 6f 64       delete[] nod
2a70	65 73 5b 6e 6f 64 65 5f  63 6f 75 6e 74 5d 2e 65   es[node_count].e
2a80	6d 62 65 64 64 69 6e 67  3b 0d 0a 20 20 20 20 20   mbedding;..     
2a90	20 20 20 20 20 20 20 20  20 20 20 6e 6f 64 65 73              nodes
2aa0	5b 6e 6f 64 65 5f 63 6f  75 6e 74 5d 2e 65 6d 62   [node_count].emb
2ab0	65 64 64 69 6e 67 20 3d  20 6e 75 6c 6c 70 74 72   edding = nullptr
2ac0	3b 0d 0a 20 20 20 20 20  20 20 20 20 20 20 20 20   ;..             
2ad0	20 20 20 63 6f 6e 74 69  6e 75 65 3b 0d 0a 20 20      continue;..  
2ae0	20 20 20 20 20 20 20 20  20 20 7d 0d 0a 20 20 20             }..   
2af0	20 20 20 20 20 20 20 20  20 6e 6f 64 65 73 5b 6e            nodes[n
2b00	6f 64 65 5f 63 6f 75 6e  74 5d 2e 69 6d 70 6f 72   ode_count].impor
2b10	74 61 6e 63 65 20 3d 20  31 2e 30 3b 0d 0a 20 20   tance = 1.0;..  
2b20	20 20 20 20 20 20 20 20  20 20 6e 6f 64 65 5f 63             node_c
2b30	6f 75 6e 74 2b 2b 3b 0d  0a 20 20 20 20 20 20 20   ount++;..       
2b40	20 7d 0d 0a 20 20 20 20  20 20 20 20 72 65 74 75    }..        retu
2b50	72 6e 20 6e 6f 64 65 5f  63 6f 75 6e 74 20 3e 20   rn node_count > 
2b60	30 3b 0d 0a 20 20 20 20  7d 0d 0a 0d 0a 20 20 20   0;..    }....   
2b70	20 62 6f 6f 6c 20 70 72  6f 63 65 73 73 4e 61 74    bool processNat
2b80	75 72 61 6c 54 65 78 74  28 63 6f 6e 73 74 20 63   uralText(const c
2b90	68 61 72 2a 20 74 65 78  74 2c 20 69 6e 74 20 6c   har* text, int l
2ba0	65 6e 67 74 68 29 20 7b  0d 0a 20 20 20 20 20 20   ength) {..      
2bb0	20 20 69 66 20 28 6c 65  6e 67 74 68 20 3c 3d 20     if (length <= 
2bc0	33 30 30 30 29 20 7b 0d  0a 20 20 20 20 20 20 20   3000) {..       
2bd0	20 20 20 20 20 6e 6f 64  65 73 5b 30 5d 2e 65 6d        nodes[0].em
2be0	62 65 64 64 69 6e 67 20  3d 20 6e 65 77 20 64 6f   bedding = new do
2bf0	75 62 6c 65 5b 45 4d 42  45 44 5f 44 49 4d 5d 3b   uble[EMBED_DIM];
2c00	0d 0a 20 20 20 20 20 20  20 20 20 20 20 20 6e 6f   ..            no
2c10	64 65 73 5b 30 5d 2e 73  74 61 72 74 5f 70 6f 73   des[0].start_pos
2c20	20 3d 20 30 3b 0d 0a 20  20 20 20 20 20 20 20 20    = 0;..         
2c30	20 20 20 6e 6f 64 65 73  5b 30 5d 2e 65 6e 64 5f      nodes[0].end_
2c40	70 6f 73 20 3d 20 6c 65  6e 67 74 68 3b 0d 0a 20   pos = length;.. 
2c50	20 20 20 20 20 20 20 20  20 20 20 69 66 20 28 6d              if (m
2c60	6f 64 65 6c 2d 3e 67 65  74 45 6d 62 65 64 64 69   odel->getEmbeddi
2c70	6e 67 28 74 65 78 74 2c  20 30 2c 20 6c 65 6e 67   ng(text, 0, leng
2c80	74 68 2c 20 6e 6f 64 65  73 5b 30 5d 2e 65 6d 62   th, nodes[0].emb
2c90	65 64 64 69 6e 67 29 29  20 7b 0d 0a 20 20 20 20   edding)) {..    
2ca0	20 20 20 20 20 20 20 20  20 20 20 20 6e 6f 64 65               node
2cb0	73 5b 30 5d 2e 69 6d 70  6f 72 74 61 6e 63 65 20   s[0].importance 
2cc0	3d 20 31 2e 35 3b 0d 0a  20 20 20 20 20 20 20 20   = 1.5;..        
2cd0	20 20 20 20 20 20 20 20  6e 6f 64 65 5f 63 6f 75           node_cou
2ce0	6e 74 20 3d 20 31 3b 0d  0a 20 20 20 20 20 20 20   nt = 1;..       
2cf0	20 20 20 20 20 20 20 20  20 72 65 74 75 72 6e 20            return 
2d00	74 72 75 65 3b 0d 0a 20  20 20 20 20 20 20 20 20   true;..         
2d10	20 20 20 7d 0d 0a 20 20  20 20 20 20 20 20 20 20      }..          
2d20	20 20 72 65 74 75 72 6e  20 66 61 6c 73 65 3b 0d     return false;.
2d30	0a 20 20 20 20 20 20 20  20 7d 0d 0a 0d 0a 20 20   .        }....  
2d40	20 20 20 20 20 20 69 6e  74 20 63 68 75 6e 6b 5f         int chunk_
2d50	73 69 7a 65 20 3d 20 31  35 30 30 3b 0d 0a 20 20   size = 1500;..  
2d60	20 20 20 20 20 20 66 6f  72 20 28 69 6e 74 20 70         for (int p
2d70	6f 73 20 3d 20 30 3b 20  70 6f 73 20 3c 20 6c 65   os = 0; pos < le
2d80	6e 67 74 68 20 26 26 20  6e 6f 64 65 5f 63 6f 75   ngth && node_cou
2d90	6e 74 20 3c 20 63 61 70  61 63 69 74 79 3b 20 70   nt < capacity; p
2da0	6f 73 20 2b 3d 20 63 68  75 6e 6b 5f 73 69 7a 65   os += chunk_size
2db0	29 20 7b 0d 0a 20 20 20  20 20 20 20 20 20 20 20   ) {..           
2dc0	20 69 6e 74 20 65 6e 64  5f 70 6f 73 20 3d 20 73    int end_pos = s
2dd0	74 64 3a 3a 6d 69 6e 28  70 6f 73 20 2b 20 63 68   td::min(pos + ch
2de0	75 6e 6b 5f 73 69 7a 65  2c 20 6c 65 6e 67 74 68   unk_size, length
2df0	29 3b 0d 0a 20 20 20 20  20 20 20 20 20 20 20 20   );..            
2e00	69 66 20 28 65 6e 64 5f  70 6f 73 20 3c 20 6c 65   if (end_pos < le
2e10	6e 67 74 68 29 20 7b 0d  0a 20 20 20 20 20 20 20   ngth) {..       
2e20	20 20 20 20 20 20 20 20  20 66 6f 72 20 28 69 6e            for (in
2e30	74 20 69 20 3d 20 30 3b  20 69 20 3c 20 32 30 30   t i = 0; i < 200
2e40	20 26 26 20 65 6e 64 5f  70 6f 73 20 2b 20 69 20    && end_pos + i 
2e50	3c 20 6c 65 6e 67 74 68  3b 20 69 2b 2b 29 20 7b   < length; i++) {
2e60	0d 0a 20 20 20 20 20 20  20 20 20 20 20 20 20 20   ..              
2e70	20 20 20 20 20 20 63 68  61 72 20 63 20 3d 20 74         char c = t
2e80	65 78 74 5b 65 6e 64 5f  70 6f 73 20 2b 20 69 5d   ext[end_pos + i]
2e90	3b 0d 0a 20 20 20 20 20  20 20 20 20 20 20 20 20   ;..             
2ea0	20 20 20 20 20 20 20 69  66 20 28 63 20 3d 3d 20          if (c == 
2eb0	27 2e 27 20 7c 7c 20 63  20 3d 3d 20 27 21 27 20   '.' || c == '!' 
2ec0	7c 7c 20 63 20 3d 3d 20  27 3f 27 20 7c 7c 20 63   || c == '?' || c
2ed0	20 3d 3d 20 27 5c 6e 27  20 7c 7c 0d 0a 20 20 20    == '\n' ||..   
2ee0	20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20                   
2ef0	20 20 20 20 20 63 20 3d  3d 20 27 e3 80 82 27 20        c == '...' 
2f00	7c 7c 20 63 20 3d 3d 20  27 ef bc 81 27 20 7c 7c   || c == '...' ||
2f10	20 63 20 3d 3d 20 27 ef  bc 9f 27 29 20 7b 0d 0a    c == '...') {..
2f20	20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20                   
2f30	20 20 20 20 20 20 20 20  65 6e 64 5f 70 6f 73 20           end_pos 
2f40	2b 3d 20 69 20 2b 20 31  3b 0d 0a 20 20 20 20 20   += i + 1;..     
2f50	20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20                   
2f60	20 20 20 62 72 65 61 6b  3b 0d 0a 20 20 20 20 20      break;..     
2f70	20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 7d                  }
2f80	0d 0a 20 20 20 20 20 20  20 20 20 20 20 20 20 20   ..              
2f90	20 20 7d 0d 0a 20 20 20  20 20 20 20 20 20 20 20     }..           
2fa0	20 7d 0d 0a 0d 0a 20 20  20 20 20 20 20 20 20 20    }....          
2fb0	20 20 6e 6f 64 65 73 5b  6e 6f 64 65 5f 63 6f 75     nodes[node_cou
2fc0	6e 74 5d 2e 65 6d 62 65  64 64 69 6e 67 20 3d 20   nt].embedding = 
2fd0	6e 65 77 20 64 6f 75 62  6c 65 5b 45 4d 42 45 44   new double[EMBED
2fe0	5f 44 49 4d 5d 3b 0d 0a  20 20 20 20 20 20 20 20   _DIM];..        
2ff0	20 20 20 20 6e 6f 64 65  73 5b 6e 6f 64 65 5f 63       nodes[node_c
3000	6f 75 6e 74 5d 2e 73 74  61 72 74 5f 70 6f 73 20   ount].start_pos 
3010	3d 20 70 6f 73 3b 0d 0a  20 20 20 20 20 20 20 20   = pos;..        
3020	20 20 20 20 6e 6f 64 65  73 5b 6e 6f 64 65 5f 63       nodes[node_c
3030	6f 75 6e 74 5d 2e 65 6e  64 5f 70 6f 73 20 3d 20   ount].end_pos = 
3040	65 6e 64 5f 70 6f 73 3b  0d 0a 0d 0a 20 20 20 20   end_pos;....    
3050	20 20 20 20 20 20 20 20  69 66 20 28 21 6d 6f 64           if (!mod
3060	65 6c 2d 3e 67 65 74 45  6d 62 65 64 64 69 6e 67   el->getEmbedding
3070	28 74 65 78 74 2c 20 70  6f 73 2c 20 65 6e 64 5f   (text, pos, end_
3080	70 6f 73 2c 20 6e 6f 64  65 73 5b 6e 6f 64 65 5f   pos, nodes[node_
3090	63 6f 75 6e 74 5d 2e 65  6d 62 65 64 64 69 6e 67   count].embedding
30a0	29 29 20 7b 0d 0a 20 20  20 20 20 20 20 20 20 20   )) {..          
30b0	20 20 20 20 20 20 64 65  6c 65 74 65 5b 5d 20 6e         delete[] n
30c0	6f 64 65 73 5b 6e 6f 64  65 5f 63 6f 75 6e 74 5d   odes[node_count]
30d0	2e 65 6d 62 65 64 64 69  6e 67 3b 0d 0a 20 20 20   .embedding;..   
30e0	20 20 20 20 20 20 20 20  20 20 20 20 20 6e 6f 64                nod
30f0	65 73 5b 6e 6f 64 65 5f  63 6f 75 6e 74 5d 2e 65   es[node_count].e
3100	6d 62 65 64 64 69 6e 67  20 3d 20 6e 75 6c 6c 70   mbedding = nullp
3110	74 72 3b 0d 0a 20 20 20  20 20 20 20 20 20 20 20   tr;..           
3120	20 20 20 20 20 63 6f 6e  74 69 6e 75 65 3b 0d 0a        continue;..
3130	20 20 20 20 20 20 20 20  20 20 20 20 7d 0d 0a 0d               }...
3140	0a 20 20 20 20 20 20 20  20 20 20 20 20 64 6f 75   .            dou
3150	62 6c 65 20 6e 6f 72 6d  20 3d 20 30 2e 30 3b 0d   ble norm = 0.0;.
3160	0a 20 20 20 20 20 20 20  20 20 20 20 20 66 6f 72   .            for
3170	20 28 69 6e 74 20 69 20  3d 20 30 3b 20 69 20 3c    (int i = 0; i <
3180	20 45 4d 42 45 44 5f 44  49 4d 3b 20 69 2b 2b 29    EMBED_DIM; i++)
3190	20 7b 0d 0a 20 20 20 20  20 20 20 20 20 20 20 20    {..            
31a0	20 20 20 20 6e 6f 72 6d  20 2b 3d 20 6e 6f 64 65       norm += node
31b0	73 5b 6e 6f 64 65 5f 63  6f 75 6e 74 5d 2e 65 6d   s[node_count].em
31c0	62 65 64 64 69 6e 67 5b  69 5d 20 2a 20 6e 6f 64   bedding[i] * nod
31d0	65 73 5b 6e 6f 64 65 5f  63 6f 75 6e 74 5d 2e 65   es[node_count].e
31e0	6d 62 65 64 64 69 6e 67  5b 69 5d 3b 0d 0a 20 20   mbedding[i];..  
31f0	20 20 20 20 20 20 20 20  20 20 7d 0d 0a 20 20 20             }..   
3200	20 20 20 20 20 20 20 20  20 6e 6f 64 65 73 5b 6e            nodes[n
3210	6f 64 65 5f 63 6f 75 6e  74 5d 2e 69 6d 70 6f 72   ode_count].impor
3220	74 61 6e 63 65 20 3d 20  73 71 72 74 28 6e 6f 72   tance = sqrt(nor
3230	6d 29 3b 0d 0a 20 20 20  20 20 20 20 20 20 20 20   m);..           
3240	20 6e 6f 64 65 5f 63 6f  75 6e 74 2b 2b 3b 0d 0a    node_count++;..
3250	20 20 20 20 20 20 20 20  20 20 20 20 70 6f 73 20               pos 
3260	3d 20 65 6e 64 5f 70 6f  73 20 2d 20 63 68 75 6e   = end_pos - chun
3270	6b 5f 73 69 7a 65 3b 0d  0a 20 20 20 20 20 20 20   k_size;..       
3280	20 7d 0d 0a 20 20 20 20  20 20 20 20 72 65 74 75    }..        retu
3290	72 6e 20 6e 6f 64 65 5f  63 6f 75 6e 74 20 3e 20   rn node_count > 
32a0	30 3b 0d 0a 20 20 20 20  7d 0d 0a 0d 0a 70 75 62   0;..    }....pub
32b0	6c 69 63 3a 0d 0a 20 20  20 20 55 6e 69 66 69 65   lic:..    Unifie
32c0	64 49 6e 70 75 74 50 72  6f 63 65 73 73 6f 72 28   dInputProcessor(
32d0	45 35 4c 61 72 67 65 4d  6f 64 65 6c 2a 20 65 35   E5LargeModel* e5
32e0	5f 6d 6f 64 65 6c 29 0d  0a 20 20 20 20 20 20 20   _model)..       
32f0	20 3a 20 6d 6f 64 65 6c  28 65 35 5f 6d 6f 64 65    : model(e5_mode
3300	6c 29 2c 20 6e 6f 64 65  73 28 6e 75 6c 6c 70 74   l), nodes(nullpt
3310	72 29 2c 20 6e 6f 64 65  5f 63 6f 75 6e 74 28 30   r), node_count(0
3320	29 2c 20 63 61 70 61 63  69 74 79 28 31 30 30 30   ), capacity(1000
3330	29 2c 0d 0a 20 20 20 20  20 20 20 20 20 20 63 75   ),..          cu
3340	72 72 65 6e 74 5f 65 78  74 72 61 63 74 5f 69 64   rrent_extract_id
3350	78 28 30 29 2c 20 67 6c  6f 62 61 6c 5f 73 65 6d   x(0), global_sem
3360	61 6e 74 69 63 5f 76 65  63 74 6f 72 28 6e 75 6c   antic_vector(nul
3370	6c 70 74 72 29 2c 20 63  6f 6e 74 65 6e 74 5f 74   lptr), content_t
3380	79 70 65 28 54 59 50 45  5f 4e 41 54 55 52 41 4c   ype(TYPE_NATURAL
3390	5f 54 45 58 54 29 20 7b  0d 0a 20 20 20 20 20 20   _TEXT) {..      
33a0	20 20 6e 6f 64 65 73 20  3d 20 6e 65 77 20 4e 6f     nodes = new No
33b0	64 65 5b 63 61 70 61 63  69 74 79 5d 3b 0d 0a 20   de[capacity];.. 
33c0	20 20 20 20 20 20 20 67  6c 6f 62 61 6c 5f 73 65          global_se
33d0	6d 61 6e 74 69 63 5f 76  65 63 74 6f 72 20 3d 20   mantic_vector = 
33e0	6e 65 77 20 64 6f 75 62  6c 65 5b 45 4d 42 45 44   new double[EMBED
33f0	5f 44 49 4d 5d 3b 0d 0a  20 20 20 20 7d 0d 0a 0d   _DIM];..    }...
3400	0a 20 20 20 20 7e 55 6e  69 66 69 65 64 49 6e 70   .    ~UnifiedInp
3410	75 74 50 72 6f 63 65 73  73 6f 72 28 29 20 7b 0d   utProcessor() {.
3420	0a 20 20 20 20 20 20 20  20 69 66 20 28 6e 6f 64   .        if (nod
3430	65 73 29 20 64 65 6c 65  74 65 5b 5d 20 6e 6f 64   es) delete[] nod
3440	65 73 3b 0d 0a 20 20 20  20 20 20 20 20 69 66 20   es;..        if 
3450	28 67 6c 6f 62 61 6c 5f  73 65 6d 61 6e 74 69 63   (global_semantic
3460	5f 76 65 63 74 6f 72 29  20 64 65 6c 65 74 65 5b   _vector) delete[
3470	5d 20 67 6c 6f 62 61 6c  5f 73 65 6d 61 6e 74 69   ] global_semanti
3480	63 5f 76 65 63 74 6f 72  3b 0d 0a 20 20 20 20 7d   c_vector;..    }
3490	0d 0a 0d 0a 20 20 20 20  62 6f 6f 6c 20 70 72 6f   ....    bool pro
34a0	63 65 73 73 54 65 78 74  28 63 6f 6e 73 74 20 63   cessText(const c
34b0	68 61 72 2a 20 74 65 78  74 2c 20 69 6e 74 20 6c   har* text, int l
34c0	65 6e 67 74 68 29 20 7b  0d 0a 20 20 20 20 20 20   ength) {..      
34d0	20 20 69 66 20 28 21 74  65 78 74 20 7c 7c 20 6c     if (!text || l
34e0	65 6e 67 74 68 20 3d 3d  20 30 20 7c 7c 20 21 6d   ength == 0 || !m
34f0	6f 64 65 6c 29 20 72 65  74 75 72 6e 20 66 61 6c   odel) return fal
3500	73 65 3b 0d 0a 20 20 20  20 20 20 20 20 6e 6f 64   se;..        nod
3510	65 5f 63 6f 75 6e 74 20  3d 20 30 3b 0d 0a 20 20   e_count = 0;..  
3520	20 20 20 20 20 20 63 75  72 72 65 6e 74 5f 65 78         current_ex
3530	74 72 61 63 74 5f 69 64  78 20 3d 20 30 3b 0d 0a   tract_idx = 0;..
3540	20 20 20 20 20 20 20 20  63 6f 6e 74 65 6e 74 5f           content_
3550	74 79 70 65 20 3d 20 64  65 74 65 63 74 43 6f 6e   type = detectCon
3560	74 65 6e 74 54 79 70 65  28 74 65 78 74 2c 20 6c   tentType(text, l
3570	65 6e 67 74 68 29 3b 0d  0a 0d 0a 20 20 20 20 20   ength);....     
3580	20 20 20 69 66 20 28 21  6d 6f 64 65 6c 2d 3e 67      if (!model->g
3590	65 74 45 6d 62 65 64 64  69 6e 67 28 74 65 78 74   etEmbedding(text
35a0	2c 20 30 2c 20 73 74 64  3a 3a 6d 69 6e 28 6c 65   , 0, std::min(le
35b0	6e 67 74 68 2c 20 35 30  30 30 29 2c 20 67 6c 6f   ngth, 5000), glo
35c0	62 61 6c 5f 73 65 6d 61  6e 74 69 63 5f 76 65 63   bal_semantic_vec
35d0	74 6f 72 29 29 20 7b 0d  0a 20 20 20 20 20 20 20   tor)) {..       
35e0	20 20 20 20 20 72 65 74  75 72 6e 20 66 61 6c 73        return fals
35f0	65 3b 0d 0a 20 20 20 20  20 20 20 20 7d 0d 0a 0d   e;..        }...
3600	0a 20 20 20 20 20 20 20  20 72 65 74 75 72 6e 20   .        return 
3610	28 63 6f 6e 74 65 6e 74  5f 74 79 70 65 20 3d 3d   (content_type ==
3620	20 54 59 50 45 5f 43 4f  44 45 29 20 3f 20 70 72    TYPE_CODE) ? pr
3630	6f 63 65 73 73 43 6f 64  65 43 6f 6e 74 65 6e 74   ocessCodeContent
3640	28 74 65 78 74 2c 20 6c  65 6e 67 74 68 29 20 3a   (text, length) :
3650	20 70 72 6f 63 65 73 73  4e 61 74 75 72 61 6c 54    processNaturalT
3660	65 78 74 28 74 65 78 74  2c 20 6c 65 6e 67 74 68   ext(text, length
3670	29 3b 0d 0a 20 20 20 20  7d 0d 0a 0d 0a 20 20 20   );..    }....   
3680	20 4d 61 74 72 69 78 32  35 36 2a 20 67 65 74 47    Matrix256* getG
3690	6c 6f 62 61 6c 41 74 74  65 6e 74 69 6f 6e 4d 61   lobalAttentionMa
36a0	74 72 69 78 28 29 20 7b  20 72 65 74 75 72 6e 20   trix() { return 
36b0	63 6f 6d 70 72 65 73 73  53 65 6d 61 6e 74 69 63   compressSemantic
36c0	56 65 63 74 6f 72 28 67  6c 6f 62 61 6c 5f 73 65   Vector(global_se
36d0	6d 61 6e 74 69 63 5f 76  65 63 74 6f 72 29 3b 20   mantic_vector); 
36e0	7d 0d 0a 0d 0a 20 20 20  20 4d 61 74 72 69 78 32   }....    Matrix2
36f0	35 36 2a 20 67 65 74 4e  65 78 74 42 6c 6f 63 6b   56* getNextBlock
3700	28 29 20 7b 0d 0a 20 20  20 20 20 20 20 20 69 66   () {..        if
3710	20 28 63 75 72 72 65 6e  74 5f 65 78 74 72 61 63    (current_extrac
3720	74 5f 69 64 78 20 3e 3d  20 6e 6f 64 65 5f 63 6f   t_idx >= node_co
3730	75 6e 74 29 20 72 65 74  75 72 6e 20 6e 75 6c 6c   unt) return null
3740	70 74 72 3b 0d 0a 20 20  20 20 20 20 20 20 4d 61   ptr;..        Ma
3750	74 72 69 78 32 35 36 2a  20 6d 61 74 20 3d 20 6e   trix256* mat = n
3760	65 77 20 4d 61 74 72 69  78 32 35 36 28 29 3b 0d   ew Matrix256();.
3770	0a 20 20 20 20 20 20 20  20 69 6e 74 20 6e 6f 64   .        int nod
3780	65 73 5f 70 65 72 5f 62  6c 6f 63 6b 20 3d 20 4d   es_per_block = M
3790	41 54 5f 45 4c 45 4d 45  4e 54 53 20 2f 20 45 4d   AT_ELEMENTS / EM
37a0	42 45 44 5f 44 49 4d 3b  0d 0a 20 20 20 20 20 20   BED_DIM;..      
37b0	20 20 69 6e 74 20 62 6c  6f 63 6b 5f 65 6e 64 20     int block_end 
37c0	3d 20 73 74 64 3a 3a 6d  69 6e 28 63 75 72 72 65   = std::min(curre
37d0	6e 74 5f 65 78 74 72 61  63 74 5f 69 64 78 20 2b   nt_extract_idx +
37e0	20 6e 6f 64 65 73 5f 70  65 72 5f 62 6c 6f 63 6b    nodes_per_block
37f0	2c 20 6e 6f 64 65 5f 63  6f 75 6e 74 29 3b 0d 0a   , node_count);..
3800	0d 0a 20 20 20 20 20 20  20 20 69 6e 74 20 69 64   ..        int id
3810	78 20 3d 20 30 3b 0d 0a  20 20 20 20 20 20 20 20   x = 0;..        
3820	66 6f 72 20 28 69 6e 74  20 69 20 3d 20 63 75 72   for (int i = cur
3830	72 65 6e 74 5f 65 78 74  72 61 63 74 5f 69 64 78   rent_extract_idx
3840	3b 20 69 20 3c 20 62 6c  6f 63 6b 5f 65 6e 64 20   ; i < block_end 
3850	26 26 20 69 64 78 20 3c  20 4d 41 54 5f 45 4c 45   && idx < MAT_ELE
3860	4d 45 4e 54 53 3b 20 69  2b 2b 29 20 7b 0d 0a 20   MENTS; i++) {.. 
3870	20 20 20 20 20 20 20 20  20 20 20 64 6f 75 62 6c              doubl
3880	65 20 77 65 69 67 68 74  20 3d 20 6e 6f 64 65 73   e weight = nodes
3890	5b 69 5d 2e 61 74 74 65  6e 74 69 6f 6e 20 2a 20   [i].attention * 
38a0	6e 6f 64 65 73 5b 69 5d  2e 69 6d 70 6f 72 74 61   nodes[i].importa
38b0	6e 63 65 3b 0d 0a 20 20  20 20 20 20 20 20 20 20   nce;..          
38c0	20 20 66 6f 72 20 28 69  6e 74 20 6a 20 3d 20 30     for (int j = 0
38d0	3b 20 6a 20 3c 20 45 4d  42 45 44 5f 44 49 4d 20   ; j < EMBED_DIM 
38e0	26 26 20 69 64 78 20 3c  20 4d 41 54 5f 45 4c 45   && idx < MAT_ELE
38f0	4d 45 4e 54 53 3b 20 6a  2b 2b 29 20 7b 0d 0a 20   MENTS; j++) {.. 
3900	20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 6d                  m
3910	61 74 2d 3e 64 61 74 61  5b 69 64 78 2b 2b 5d 20   at->data[idx++] 
3920	3d 20 6e 6f 64 65 73 5b  69 5d 2e 65 6d 62 65 64   = nodes[i].embed
3930	64 69 6e 67 5b 6a 5d 20  2a 20 77 65 69 67 68 74   ding[j] * weight
3940	3b 0d 0a 20 20 20 20 20  20 20 20 20 20 20 20 7d   ;..            }
3950	0d 0a 20 20 20 20 20 20  20 20 7d 0d 0a 20 20 20   ..        }..   
3960	20 20 20 20 20 77 68 69  6c 65 20 28 69 64 78 20        while (idx 
3970	3c 20 4d 41 54 5f 45 4c  45 4d 45 4e 54 53 29 20   < MAT_ELEMENTS) 
3980	6d 61 74 2d 3e 64 61 74  61 5b 69 64 78 2b 2b 5d   mat->data[idx++]
3990	20 3d 20 30 2e 30 3b 0d  0a 0d 0a 20 20 20 20 20    = 0.0;....     
39a0	20 20 20 64 6f 75 62 6c  65 2a 20 74 65 6d 70 20      double* temp 
39b0	3d 20 6e 65 77 20 64 6f  75 62 6c 65 5b 4d 41 54   = new double[MAT
39c0	5f 45 4c 45 4d 45 4e 54  53 5d 3b 0d 0a 20 20 20   _ELEMENTS];..   
39d0	20 20 20 20 20 6d 65 6d  63 70 79 28 74 65 6d 70        memcpy(temp
39e0	2c 20 6d 61 74 2d 3e 64  61 74 61 2c 20 4d 41 54   , mat->data, MAT
39f0	5f 45 4c 45 4d 45 4e 54  53 20 2a 20 73 69 7a 65   _ELEMENTS * size
3a00	6f 66 28 64 6f 75 62 6c  65 29 29 3b 0d 0a 20 20   of(double));..  
3a10	20 20 20 20 20 20 64 63  74 32 64 28 74 65 6d 70         dct2d(temp
3a20	2c 20 6d 61 74 2d 3e 64  61 74 61 2c 20 4d 41 54   , mat->data, MAT
3a30	5f 53 49 5a 45 29 3b 0d  0a 20 20 20 20 20 20 20   _SIZE);..       
3a40	20 64 65 6c 65 74 65 5b  5d 20 74 65 6d 70 3b 0d    delete[] temp;.
3a50	0a 0d 0a 20 20 20 20 20  20 20 20 63 75 72 72 65   ...        curre
3a60	6e 74 5f 65 78 74 72 61  63 74 5f 69 64 78 20 3d   nt_extract_idx =
3a70	20 62 6c 6f 63 6b 5f 65  6e 64 3b 0d 0a 20 20 20    block_end;..   
3a80	20 20 20 20 20 72 65 74  75 72 6e 20 6d 61 74 3b        return mat;
3a90	0d 0a 20 20 20 20 7d 0d  0a 0d 0a 20 20 20 20 62   ..    }....    b
3aa0	6f 6f 6c 20 68 61 73 4d  6f 72 65 42 6c 6f 63 6b   ool hasMoreBlock
3ab0	73 28 29 20 63 6f 6e 73  74 20 7b 20 72 65 74 75   s() const { retu
3ac0	72 6e 20 63 75 72 72 65  6e 74 5f 65 78 74 72 61   rn current_extra
3ad0	63 74 5f 69 64 78 20 3c  20 6e 6f 64 65 5f 63 6f   ct_idx < node_co
3ae0	75 6e 74 3b 20 7d 0d 0a  20 20 20 20 69 6e 74 20   unt; }..    int 
3af0	67 65 74 54 6f 74 61 6c  42 6c 6f 63 6b 73 28 29   getTotalBlocks()
3b00	20 63 6f 6e 73 74 20 7b  20 72 65 74 75 72 6e 20    const { return 
3b10	28 6e 6f 64 65 5f 63 6f  75 6e 74 20 2b 20 28 4d   (node_count + (M
3b20	41 54 5f 45 4c 45 4d 45  4e 54 53 2f 45 4d 42 45   AT_ELEMENTS/EMBE
3b30	44 5f 44 49 4d 29 20 2d  20 31 29 20 2f 20 28 4d   D_DIM) - 1) / (M
3b40	41 54 5f 45 4c 45 4d 45  4e 54 53 2f 45 4d 42 45   AT_ELEMENTS/EMBE
3b50	44 5f 44 49 4d 29 3b 20  7d 0d 0a 0d 0a 20 20 20   D_DIM); }....   
3b60	20 63 6f 6e 73 74 20 63  68 61 72 2a 20 67 65 74    const char* get
3b70	43 6f 6e 74 65 6e 74 54  79 70 65 4e 61 6d 65 28   ContentTypeName(
3b80	29 20 63 6f 6e 73 74 20  7b 0d 0a 20 20 20 20 20   ) const {..     
3b90	20 20 20 73 77 69 74 63  68 20 28 63 6f 6e 74 65      switch (conte
3ba0	6e 74 5f 74 79 70 65 29  20 7b 0d 0a 20 20 20 20   nt_type) {..    
3bb0	20 20 20 20 20 20 20 20  63 61 73 65 20 54 59 50           case TYP
3bc0	45 5f 43 4f 44 45 3a 20  72 65 74 75 72 6e 20 22   E_CODE: return "
3bd0	e4 bb a3 e7 a0 81 22 3b  0d 0a 20 20 20 20 20 20   ......";..      
3be0	20 20 20 20 20 20 63 61  73 65 20 54 59 50 45 5f         case TYPE_
3bf0	4e 41 54 55 52 41 4c 5f  54 45 58 54 3a 20 72 65   NATURAL_TEXT: re
3c00	74 75 72 6e 20 22 e8 87  aa e7 84 b6 e8 af ad e8   turn "..........
3c10	a8 80 22 3b 0d 0a 20 20  20 20 20 20 20 20 20 20   ..";..          
3c20	20 20 63 61 73 65 20 54  59 50 45 5f 4d 49 58 45     case TYPE_MIXE
3c30	44 3a 20 72 65 74 75 72  6e 20 22 e6 b7 b7 e5 90   D: return ".....
3c40	88 e5 86 85 e5 ae b9 22  3b 0d 0a 20 20 20 20 20   .......";..     
3c50	20 20 20 20 20 20 20 64  65 66 61 75 6c 74 3a 20          default: 
3c60	72 65 74 75 72 6e 20 22  e6 9c aa e7 9f a5 22 3b   return "......";
3c70	0d 0a 20 20 20 20 20 20  20 20 7d 0d 0a 20 20 20   ..        }..   
3c80	20 7d 0d 0a 7d 3b 0d 0a  0d 0a 2f 2f 20 3d 3d 3d    }..};....// ===
3c90	3d 3d 3d 3d 3d 3d 3d 3d  3d 20 e5 9b be e5 83 8f   ========= ......
3ca0	e5 a4 84 e7 90 86 20 3d  3d 3d 3d 3d 3d 3d 3d 3d   ...... =========
3cb0	3d 3d 3d 0d 0a 63 6c 61  73 73 20 49 6d 61 67 65   ===..class Image
3cc0	50 72 6f 63 65 73 73 6f  72 20 7b 0d 0a 70 75 62   Processor {..pub
3cd0	6c 69 63 3a 0d 0a 20 20  20 20 73 74 61 74 69 63   lic:..    static
3ce0	20 4d 61 74 72 69 78 32  35 36 2a 20 65 6e 63 6f    Matrix256* enco
3cf0	64 65 28 63 6f 6e 73 74  20 49 6d 61 67 65 44 61   de(const ImageDa
3d00	74 61 2a 20 69 6d 67 29  20 7b 0d 0a 20 20 20 20   ta* img) {..    
3d10	20 20 20 20 69 66 20 28  21 69 6d 67 20 7c 7c 20       if (!img || 
3d20	21 69 6d 67 2d 3e 70 69  78 65 6c 73 29 20 72 65   !img->pixels) re
3d30	74 75 72 6e 20 6e 75 6c  6c 70 74 72 3b 0d 0a 20   turn nullptr;.. 
3d40	20 20 20 20 20 20 20 4d  61 74 72 69 78 32 35 36          Matrix256
3d50	2a 20 6d 61 74 20 3d 20  6e 65 77 20 4d 61 74 72   * mat = new Matr
3d60	69 78 32 35 36 28 29 3b  0d 0a 20 20 20 20 20 20   ix256();..      
3d70	20 20 64 6f 75 62 6c 65  2a 20 74 65 6d 70 20 3d     double* temp =
3d80	20 6e 65 77 20 64 6f 75  62 6c 65 5b 4d 41 54 5f    new double[MAT_
3d90	45 4c 45 4d 45 4e 54 53  5d 3b 0d 0a 20 20 20 20   ELEMENTS];..    
3da0	20 20 20 20 64 6f 75 62  6c 65 20 73 63 61 6c 65       double scale
3db0	5f 78 20 3d 20 28 64 6f  75 62 6c 65 29 69 6d 67   _x = (double)img
3dc0	2d 3e 77 69 64 74 68 20  2f 20 4d 41 54 5f 53 49   ->width / MAT_SI
3dd0	5a 45 3b 0d 0a 20 20 20  20 20 20 20 20 64 6f 75   ZE;..        dou
3de0	62 6c 65 20 73 63 61 6c  65 5f 79 20 3d 20 28 64   ble scale_y = (d
3df0	6f 75 62 6c 65 29 69 6d  67 2d 3e 68 65 69 67 68   ouble)img->heigh
3e00	74 20 2f 20 4d 41 54 5f  53 49 5a 45 3b 0d 0a 0d   t / MAT_SIZE;...
3e10	0a 20 20 20 20 20 20 20  20 66 6f 72 20 28 69 6e   .        for (in
3e20	74 20 69 20 3d 20 30 3b  20 69 20 3c 20 4d 41 54   t i = 0; i < MAT
3e30	5f 53 49 5a 45 3b 20 69  2b 2b 29 20 7b 0d 0a 20   _SIZE; i++) {.. 
3e40	20 20 20 20 20 20 20 20  20 20 20 66 6f 72 20 28              for (
3e50	69 6e 74 20 6a 20 3d 20  30 3b 20 6a 20 3c 20 4d   int j = 0; j < M
3e60	41 54 5f 53 49 5a 45 3b  20 6a 2b 2b 29 20 7b 0d   AT_SIZE; j++) {.
3e70	0a 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20   .               
3e80	20 64 6f 75 62 6c 65 20  73 72 63 5f 78 20 3d 20    double src_x = 
3e90	6a 20 2a 20 73 63 61 6c  65 5f 78 2c 20 73 72 63   j * scale_x, src
3ea0	5f 79 20 3d 20 69 20 2a  20 73 63 61 6c 65 5f 79   _y = i * scale_y
3eb0	3b 0d 0a 20 20 20 20 20  20 20 20 20 20 20 20 20   ;..             
3ec0	20 20 20 69 6e 74 20 78  30 20 3d 20 28 69 6e 74      int x0 = (int
3ed0	29 73 72 63 5f 78 2c 20  79 30 20 3d 20 28 69 6e   )src_x, y0 = (in
3ee0	74 29 73 72 63 5f 79 3b  0d 0a 20 20 20 20 20 20   t)src_y;..      
3ef0	20 20 20 20 20 20 20 20  20 20 69 6e 74 20 78 31             int x1
3f00	20 3d 20 73 74 64 3a 3a  6d 69 6e 28 78 30 20 2b    = std::min(x0 +
3f10	20 31 2c 20 69 6d 67 2d  3e 77 69 64 74 68 20 2d    1, img->width -
3f20	20 31 29 3b 0d 0a 20 20  20 20 20 20 20 20 20 20    1);..          
3f30	20 20 20 20 20 20 69 6e  74 20 79 31 20 3d 20 73         int y1 = s
3f40	74 64 3a 3a 6d 69 6e 28  79 30 20 2b 20 31 2c 20   td::min(y0 + 1, 
3f50	69 6d 67 2d 3e 68 65 69  67 68 74 20 2d 20 31 29   img->height - 1)
3f60	3b 0d 0a 20 20 20 20 20  20 20 20 20 20 20 20 20   ;..             
3f70	20 20 20 64 6f 75 62 6c  65 20 66 78 20 3d 20 73      double fx = s
3f80	72 63 5f 78 20 2d 20 78  30 2c 20 66 79 20 3d 20   rc_x - x0, fy = 
3f90	73 72 63 5f 79 20 2d 20  79 30 3b 0d 0a 0d 0a 20   src_y - y0;.... 
3fa0	20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 61                  a
3fb0	75 74 6f 20 67 65 74 47  72 61 79 20 3d 20 5b 26   uto getGray = [&
3fc0	5d 28 69 6e 74 20 78 2c  20 69 6e 74 20 79 29 20   ](int x, int y) 
3fd0	2d 3e 20 64 6f 75 62 6c  65 20 7b 0d 0a 20 20 20   -> double {..   
3fe0	20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20                   
3ff0	20 69 6e 74 20 69 64 78  20 3d 20 28 79 20 2a 20    int idx = (y * 
4000	69 6d 67 2d 3e 77 69 64  74 68 20 2b 20 78 29 20   img->width + x) 
4010	2a 20 69 6d 67 2d 3e 63  68 61 6e 6e 65 6c 73 3b   * img->channels;
4020	0d 0a 20 20 20 20 20 20  20 20 20 20 20 20 20 20   ..              
4030	20 20 20 20 20 20 72 65  74 75 72 6e 20 30 2e 32         return 0.2
4040	39 39 20 2a 20 69 6d 67  2d 3e 70 69 78 65 6c 73   99 * img->pixels
4050	5b 69 64 78 5d 20 2b 20  30 2e 35 38 37 20 2a 20   [idx] + 0.587 * 
4060	69 6d 67 2d 3e 70 69 78  65 6c 73 5b 69 64 78 2b   img->pixels[idx+
4070	31 5d 20 2b 20 30 2e 31  31 34 20 2a 20 69 6d 67   1] + 0.114 * img
4080	2d 3e 70 69 78 65 6c 73  5b 69 64 78 2b 32 5d 3b   ->pixels[idx+2];
4090	0d 0a 20 20 20 20 20 20  20 20 20 20 20 20 20 20   ..              
40a0	20 20 7d 3b 0d 0a 0d 0a  20 20 20 20 20 20 20 20     };....        
40b0	20 20 20 20 20 20 20 20  64 6f 75 62 6c 65 20 67           double g
40c0	30 30 20 3d 20 67 65 74  47 72 61 79 28 78 30 2c   00 = getGray(x0,
40d0	20 79 30 29 2c 20 67 30  31 20 3d 20 67 65 74 47    y0), g01 = getG
40e0	72 61 79 28 78 31 2c 20  79 30 29 3b 0d 0a 20 20   ray(x1, y0);..  
40f0	20 20 20 20 20 20 20 20  20 20 20 20 20 20 64 6f                 do
4100	75 62 6c 65 20 67 31 30  20 3d 20 67 65 74 47 72   uble g10 = getGr
4110	61 79 28 78 30 2c 20 79  31 29 2c 20 67 31 31 20   ay(x0, y1), g11 
4120	3d 20 67 65 74 47 72 61  79 28 78 31 2c 20 79 31   = getGray(x1, y1
4130	29 3b 0d 0a 20 20 20 20  20 20 20 20 20 20 20 20   );..            
4140	20 20 20 20 64 6f 75 62  6c 65 20 67 72 61 79 20       double gray 
4150	3d 20 28 31 2d 66 78 29  2a 28 31 2d 66 79 29 2a   = (1-fx)*(1-fy)*
4160	67 30 30 20 2b 20 66 78  2a 28 31 2d 66 79 29 2a   g00 + fx*(1-fy)*
4170	67 30 31 20 2b 20 28 31  2d 66 78 29 2a 66 79 2a   g01 + (1-fx)*fy*
4180	67 31 30 20 2b 20 66 78  2a 66 79 2a 67 31 31 3b   g10 + fx*fy*g11;
4190	0d 0a 20 20 20 20 20 20  20 20 20 20 20 20 20 20   ..              
41a0	20 20 74 65 6d 70 5b 69  2a 4d 41 54 5f 53 49 5a     temp[i*MAT_SIZ
41b0	45 20 2b 20 6a 5d 20 3d  20 67 72 61 79 20 2f 20   E + j] = gray / 
41c0	32 35 35 2e 30 3b 0d 0a  20 20 20 20 20 20 20 20   255.0;..        
41d0	20 20 20 20 7d 0d 0a 20  20 20 20 20 20 20 20 7d       }..        }
41e0	0d 0a 0d 0a 20 20 20 20  20 20 20 20 64 63 74 32   ....        dct2
41f0	64 28 74 65 6d 70 2c 20  6d 61 74 2d 3e 64 61 74   d(temp, mat->dat
4200	61 2c 20 4d 41 54 5f 53  49 5a 45 29 3b 0d 0a 20   a, MAT_SIZE);.. 
4210	20 20 20 20 20 20 20 64  65 6c 65 74 65 5b 5d 20          delete[] 
4220	74 65 6d 70 3b 0d 0a 20  20 20 20 20 20 20 20 72   temp;..        r
4230	65 74 75 72 6e 20 6d 61  74 3b 0d 0a 20 20 20 20   eturn mat;..    
4240	7d 0d 0a 0d 0a 20 20 20  20 73 74 61 74 69 63 20   }....    static 
4250	49 6d 61 67 65 44 61 74  61 2a 20 64 65 63 6f 64   ImageData* decod
4260	65 28 63 6f 6e 73 74 20  4d 61 74 72 69 78 32 35   e(const Matrix25
4270	36 2a 20 6d 61 74 29 20  7b 0d 0a 20 20 20 20 20   6* mat) {..     
4280	20 20 20 69 66 20 28 21  6d 61 74 29 20 72 65 74      if (!mat) ret
4290	75 72 6e 20 6e 75 6c 6c  70 74 72 3b 0d 0a 20 20   urn nullptr;..  
42a0	20 20 20 20 20 20 64 6f  75 62 6c 65 2a 20 74 65         double* te
42b0	6d 70 20 3d 20 6e 65 77  20 64 6f 75 62 6c 65 5b   mp = new double[
42c0	4d 41 54 5f 45 4c 45 4d  45 4e 54 53 5d 3b 0d 0a   MAT_ELEMENTS];..
42d0	20 20 20 20 20 20 20 20  69 64 63 74 32 64 28 6d           idct2d(m
42e0	61 74 2d 3e 64 61 74 61  2c 20 74 65 6d 70 2c 20   at->data, temp, 
42f0	4d 41 54 5f 53 49 5a 45  29 3b 0d 0a 0d 0a 20 20   MAT_SIZE);....  
4300	20 20 20 20 20 20 49 6d  61 67 65 44 61 74 61 2a         ImageData*
4310	20 69 6d 67 20 3d 20 6e  65 77 20 49 6d 61 67 65    img = new Image
4320	44 61 74 61 28 29 3b 0d  0a 20 20 20 20 20 20 20   Data();..       
4330	20 69 6d 67 2d 3e 77 69  64 74 68 20 3d 20 4d 41    img->width = MA
4340	54 5f 53 49 5a 45 3b 0d  0a 20 20 20 20 20 20 20   T_SIZE;..       
4350	20 69 6d 67 2d 3e 68 65  69 67 68 74 20 3d 20 4d    img->height = M
4360	41 54 5f 53 49 5a 45 3b  0d 0a 20 20 20 20 20 20   AT_SIZE;..      
4370	20 20 69 6d 67 2d 3e 63  68 61 6e 6e 65 6c 73 20     img->channels 
4380	3d 20 33 3b 0d 0a 20 20  20 20 20 20 20 20 69 6d   = 3;..        im
4390	67 2d 3e 70 69 78 65 6c  73 20 3d 20 6e 65 77 20   g->pixels = new 
43a0	75 6e 73 69 67 6e 65 64  20 63 68 61 72 5b 4d 41   unsigned char[MA
43b0	54 5f 45 4c 45 4d 45 4e  54 53 20 2a 20 33 5d 3b   T_ELEMENTS * 3];
43c0	0d 0a 0d 0a 20 20 20 20  20 20 20 20 66 6f 72 20   ....        for 
43d0	28 69 6e 74 20 69 20 3d  20 30 3b 20 69 20 3c 20   (int i = 0; i < 
43e0	4d 41 54 5f 45 4c 45 4d  45 4e 54 53 3b 20 69 2b   MAT_ELEMENTS; i+
43f0	2b 29 20 7b 0d 0a 20 20  20 20 20 20 20 20 20 20   +) {..          
4400	20 20 64 6f 75 62 6c 65  20 76 61 6c 20 3d 20 73     double val = s
4410	74 64 3a 3a 6d 61 78 28  30 2e 30 2c 20 73 74 64   td::max(0.0, std
4420	3a 3a 6d 69 6e 28 32 35  35 2e 30 2c 20 74 65 6d   ::min(255.0, tem
4430	70 5b 69 5d 20 2a 20 32  35 35 2e 30 29 29 3b 0d   p[i] * 255.0));.
4440	0a 20 20 20 20 20 20 20  20 20 20 20 20 75 6e 73   .            uns
4450	69 67 6e 65 64 20 63 68  61 72 20 67 72 61 79 20   igned char gray 
4460	3d 20 28 75 6e 73 69 67  6e 65 64 20 63 68 61 72   = (unsigned char
4470	29 76 61 6c 3b 0d 0a 20  20 20 20 20 20 20 20 20   )val;..         
4480	20 20 20 69 6d 67 2d 3e  70 69 78 65 6c 73 5b 69      img->pixels[i
4490	2a 33 5d 20 3d 20 69 6d  67 2d 3e 70 69 78 65 6c   *3] = img->pixel
44a0	73 5b 69 2a 33 2b 31 5d  20 3d 20 69 6d 67 2d 3e   s[i*3+1] = img->
44b0	70 69 78 65 6c 73 5b 69  2a 33 2b 32 5d 20 3d 20   pixels[i*3+2] = 
44c0	67 72 61 79 3b 0d 0a 20  20 20 20 20 20 20 20 7d   gray;..        }
44d0	0d 0a 0d 0a 20 20 20 20  20 20 20 20 64 65 6c 65   ....        dele
44e0	74 65 5b 5d 20 74 65 6d  70 3b 0d 0a 20 20 20 20   te[] temp;..    
44f0	20 20 20 20 72 65 74 75  72 6e 20 69 6d 67 3b 0d       return img;.
4500	0a 20 20 20 20 7d 0d 0a  0d 0a 20 20 20 20 73 74   .    }....    st
4510	61 74 69 63 20 49 6d 61  67 65 44 61 74 61 2a 20   atic ImageData* 
4520	6d 65 72 67 65 46 72 61  6d 65 73 28 4d 61 74 72   mergeFrames(Matr
4530	69 78 32 35 36 2a 2a 20  66 72 61 6d 65 73 2c 20   ix256** frames, 
4540	69 6e 74 20 66 72 61 6d  65 5f 63 6f 75 6e 74 2c   int frame_count,
4550	20 64 6f 75 62 6c 65 20  74 68 72 65 73 68 6f 6c    double threshol
4560	64 20 3d 20 30 2e 30 31  29 20 7b 0d 0a 20 20 20   d = 0.01) {..   
4570	20 20 20 20 20 69 66 20  28 21 66 72 61 6d 65 73        if (!frames
4580	20 7c 7c 20 66 72 61 6d  65 5f 63 6f 75 6e 74 20    || frame_count 
4590	3d 3d 20 30 29 20 72 65  74 75 72 6e 20 6e 75 6c   == 0) return nul
45a0	6c 70 74 72 3b 0d 0a 20  20 20 20 20 20 20 20 4d   lptr;..        M
45b0	61 74 72 69 78 32 35 36  20 6d 65 72 67 65 64 3b   atrix256 merged;
45c0	0d 0a 20 20 20 20 20 20  20 20 69 6e 74 20 76 61   ..        int va
45d0	6c 69 64 5f 63 6f 75 6e  74 20 3d 20 30 3b 0d 0a   lid_count = 0;..
45e0	0d 0a 20 20 20 20 20 20  20 20 66 6f 72 20 28 69   ..        for (i
45f0	6e 74 20 69 20 3d 20 30  3b 20 69 20 3c 20 66 72   nt i = 0; i < fr
4600	61 6d 65 5f 63 6f 75 6e  74 3b 20 69 2b 2b 29 20   ame_count; i++) 
4610	7b 0d 0a 20 20 20 20 20  20 20 20 20 20 20 20 69   {..            i
4620	66 20 28 21 66 72 61 6d  65 73 5b 69 5d 29 20 63   f (!frames[i]) c
4630	6f 6e 74 69 6e 75 65 3b  0d 0a 20 20 20 20 20 20   ontinue;..      
4640	20 20 20 20 20 20 64 6f  75 62 6c 65 20 65 6e 65         double ene
4650	72 67 79 20 3d 20 30 2e  30 3b 0d 0a 20 20 20 20   rgy = 0.0;..    
4660	20 20 20 20 20 20 20 20  66 6f 72 20 28 69 6e 74           for (int
4670	20 6a 20 3d 20 30 3b 20  6a 20 3c 20 4d 41 54 5f    j = 0; j < MAT_
4680	45 4c 45 4d 45 4e 54 53  3b 20 6a 2b 2b 29 20 7b   ELEMENTS; j++) {
4690	0d 0a 20 20 20 20 20 20  20 20 20 20 20 20 20 20   ..              
46a0	20 20 65 6e 65 72 67 79  20 2b 3d 20 66 72 61 6d     energy += fram
46b0	65 73 5b 69 5d 2d 3e 64  61 74 61 5b 6a 5d 20 2a   es[i]->data[j] *
46c0	20 66 72 61 6d 65 73 5b  69 5d 2d 3e 64 61 74 61    frames[i]->data
46d0	5b 6a 5d 3b 0d 0a 20 20  20 20 20 20 20 20 20 20   [j];..          
46e0	20 20 7d 0d 0a 20 20 20  20 20 20 20 20 20 20 20     }..           
46f0	20 69 66 20 28 73 71 72  74 28 65 6e 65 72 67 79    if (sqrt(energy
4700	20 2f 20 4d 41 54 5f 45  4c 45 4d 45 4e 54 53 29    / MAT_ELEMENTS)
4710	20 3e 20 74 68 72 65 73  68 6f 6c 64 29 20 7b 0d    > threshold) {.
4720	0a 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20   .               
4730	20 66 6f 72 20 28 69 6e  74 20 6a 20 3d 20 30 3b    for (int j = 0;
4740	20 6a 20 3c 20 4d 41 54  5f 45 4c 45 4d 45 4e 54    j < MAT_ELEMENT
4750	53 3b 20 6a 2b 2b 29 20  6d 65 72 67 65 64 2e 64   S; j++) merged.d
4760	61 74 61 5b 6a 5d 20 2b  3d 20 66 72 61 6d 65 73   ata[j] += frames
4770	5b 69 5d 2d 3e 64 61 74  61 5b 6a 5d 3b 0d 0a 20   [i]->data[j];.. 
4780	20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 76                  v
4790	61 6c 69 64 5f 63 6f 75  6e 74 2b 2b 3b 0d 0a 20   alid_count++;.. 
47a0	20 20 20 20 20 20 20 20  20 20 20 7d 0d 0a 20 20              }..  
47b0	20 20 20 20 20 20 7d 0d  0a 0d 0a 20 20 20 20 20         }....     
47c0	20 20 20 69 66 20 28 76  61 6c 69 64 5f 63 6f 75      if (valid_cou
47d0	6e 74 20 3d 3d 20 30 29  20 72 65 74 75 72 6e 20   nt == 0) return 
47e0	6e 75 6c 6c 70 74 72 3b  0d 0a 20 20 20 20 20 20   nullptr;..      
47f0	20 20 66 6f 72 20 28 69  6e 74 20 6a 20 3d 20 30     for (int j = 0
4800	3b 20 6a 20 3c 20 4d 41  54 5f 45 4c 45 4d 45 4e   ; j < MAT_ELEMEN
4810	54 53 3b 20 6a 2b 2b 29  20 6d 65 72 67 65 64 2e   TS; j++) merged.
4820	64 61 74 61 5b 6a 5d 20  2f 3d 20 76 61 6c 69 64   data[j] /= valid
4830	5f 63 6f 75 6e 74 3b 0d  0a 20 20 20 20 20 20 20   _count;..       
4840	20 72 65 74 75 72 6e 20  64 65 63 6f 64 65 28 26    return decode(&
4850	6d 65 72 67 65 64 29 3b  0d 0a 20 20 20 20 7d 0d   merged);..    }.
4860	0a 7d 3b 0d 0a 0d 0a 2f  2f 20 3d 3d 3d 3d 3d 3d   .};....// ======
4870	3d 3d 3d 3d 3d 3d 20 e5  85 a8 e5 b1 80 41 50 49   ====== ......API
4880	20 3d 3d 3d 3d 3d 3d 3d  3d 3d 3d 3d 3d 0d 0a 73    ============..s
4890	74 61 74 69 63 20 45 35  4c 61 72 67 65 4d 6f 64   tatic E5LargeMod
48a0	65 6c 2a 20 67 5f 65 35  5f 6d 6f 64 65 6c 20 3d   el* g_e5_model =
48b0	20 6e 75 6c 6c 70 74 72  3b 0d 0a 0d 0a 62 6f 6f    nullptr;....boo
48c0	6c 20 69 6e 69 74 55 6e  69 66 69 65 64 53 79 73   l initUnifiedSys
48d0	74 65 6d 28 63 6f 6e 73  74 20 63 68 61 72 2a 20   tem(const char* 
48e0	6d 6f 64 65 6c 5f 70 61  74 68 2c 20 63 6f 6e 73   model_path, cons
48f0	74 20 63 68 61 72 2a 20  76 6f 63 61 62 5f 70 61   t char* vocab_pa
4900	74 68 2c 0d 0a 20 20 20  20 20 20 20 20 20 20 20   th,..           
4910	20 20 20 20 20 20 20 20  20 20 20 63 6f 6e 73 74              const
4920	20 63 68 61 72 2a 20 6d  65 72 67 65 73 5f 70 61    char* merges_pa
4930	74 68 2c 20 63 6f 6e 73  74 20 63 68 61 72 2a 20   th, const char* 
4940	73 70 65 63 69 61 6c 5f  74 6f 6b 65 6e 73 5f 70   special_tokens_p
4950	61 74 68 29 20 7b 0d 0a  20 20 20 20 69 66 20 28   ath) {..    if (
4960	67 5f 65 35 5f 6d 6f 64  65 6c 29 20 64 65 6c 65   g_e5_model) dele
4970	74 65 20 67 5f 65 35 5f  6d 6f 64 65 6c 3b 0d 0a   te g_e5_model;..
4980	20 20 20 20 74 72 79 20  7b 0d 0a 20 20 20 20 20       try {..     
4990	20 20 20 67 5f 65 35 5f  6d 6f 64 65 6c 20 3d 20      g_e5_model = 
49a0	6e 65 77 20 45 35 4c 61  72 67 65 4d 6f 64 65 6c   new E5LargeModel
49b0	28 6d 6f 64 65 6c 5f 70  61 74 68 2c 20 76 6f 63   (model_path, voc
49c0	61 62 5f 70 61 74 68 2c  20 6d 65 72 67 65 73 5f   ab_path, merges_
49d0	70 61 74 68 2c 20 73 70  65 63 69 61 6c 5f 74 6f   path, special_to
49e0	6b 65 6e 73 5f 70 61 74  68 29 3b 0d 0a 20 20 20   kens_path);..   
49f0	20 20 20 20 20 72 65 74  75 72 6e 20 74 72 75 65        return true
4a00	3b 0d 0a 20 20 20 20 7d  63 61 74 63 68 20 28 2e   ;..    }catch (.
4a10	2e 2e 29 20 7b 0d 0a 20  20 20 20 20 20 20 20 69   ..) {..        i
4a20	66 20 28 67 5f 65 35 5f  6d 6f 64 65 6c 29 20 7b   f (g_e5_model) {
4a30	0d 0a 20 20 20 20 20 20  20 20 20 20 20 20 64 65   ..            de
4a40	6c 65 74 65 20 67 5f 65  35 5f 6d 6f 64 65 6c 3b   lete g_e5_model;
4a50	0d 0a 20 20 20 20 20 20  20 20 20 20 20 20 67 5f   ..            g_
4a60	65 35 5f 6d 6f 64 65 6c  20 3d 20 6e 75 6c 6c 70   e5_model = nullp
4a70	74 72 3b 0d 0a 20 20 20  20 20 20 20 20 7d 0d 0a   tr;..        }..
4a80	20 20 20 20 20 20 20 20  72 65 74 75 72 6e 20 66           return f
4a90	61 6c 73 65 3b 0d 0a 20  20 20 20 7d 0d 0a 7d      alse;..    }..}
